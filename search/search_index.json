{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cours de NSI - Premi\u00e8re - Groupe de M. Gouygou \u2693\ufe0e Vous trouverez sur ce site tous les cours de l'ann\u00e9e en sp\u00e9cialit\u00e9 NSI. Programme et progression \u2693\ufe0e Le programme de NSI est articul\u00e9 autour de sept th\u00e8mes Nous traiterons les diff\u00e9rentes entr\u00e9es du programme dans les chapitres suivants: Th\u00e8me 1 Th\u00e8me 1: Repr\u00e9sentation des donn\u00e9es, types et valeurs de base 1.1 \u00c9criture d'un entier positif dans une base \\(b \\geqslant 2\\) (2, 10 ou 16). 1.2 Valeurs et expressions bool\u00e9ennes 1.3 Repr\u00e9sentation binaire d'un entier relatif 1.4 Codage des caract\u00e8res 1.5 Repr\u00e9sentation des r\u00e9els: nombres flottants Th\u00e8me 2 Th\u00e8me 2: Repr\u00e9sentation des donn\u00e9es, types construits 2.1 Tableaux et listes 2.2 Dictionnaires Th\u00e8me 3 Th\u00e8me 3: Traitement de donn\u00e9es en tables 3.1 Manipulation, recherche et tri de tables 3.2 Fusion et jointure de tables Th\u00e8me 4 Th\u00e8me 4: Interaction entre l'homme et la machine (IHM) sur le Web 4.1 Pages Web et interactions 4.2 Protocole HTTP 4.3 Requ\u00eates GET/POST et formulaires d'une page Web Th\u00e8me 5 Th\u00e8me 5: Architectures mat\u00e9rielles et syst\u00e8mes d'exploitation 5.1 Mod\u00e8le de Von Neumann 5.2 Syst\u00e8mes d'exploitation 5.3 Architecture d'un r\u00e9seau 5.4 IHM, capteurs (Microbit) Th\u00e8me 6 Th\u00e8me 6: Langages et programmation 6.1 Prise en main de Python 6.2 Utilisation de biblioth\u00e8ques 6.3 Sp\u00e9cification 6.4 Jeux de tests Th\u00e8me 7 Th\u00e8me 7: Algorithmique 7.1 Parcours s\u00e9quentiel d'un tableau 7.2 Algorithmes de tri 7.3 Recherche dichotomique dans un tableau tri\u00e9 7.4 Algorithmes gloutons 7.5 Algorithme des \\(k\\) plus proches voisins Progression Cette progression est d\u00e9coup\u00e9e selon les 5 p\u00e9riodes entre les vacances. P\u00e9riode 1 6.1 Prise en main de Python 1.1 \u00c9criture d'un entier positif dans une base \\(b \\geqslant 2\\) (2, 10 ou 16). 6.2 Utilisation de biblioth\u00e8ques 1.2 Valeurs et expressions bool\u00e9ennes 1.3 Repr\u00e9sentation binaire d'un entier relatif P\u00e9riode 2 6.3 Sp\u00e9cification 6.4 Jeux de tests 2.1 Tableaux et listes 7.1 Parcours s\u00e9quentiel d'un tableau 1.4 Codage des caract\u00e8res 4.1 Pages Web et interactions P\u00e9riode 3 5.1 Mod\u00e8le de Von Neumann 2.2 Dictionnaires 3.1 Manipulation, recherche et tri de tables 3.2 Fusion et jointure de tables 5.2 Syst\u00e8mes d'exploitation 7.2 Algorithmes de tri P\u00e9riode 4 4.2 Protocole HTTP 4.3 Requ\u00eates GET/POST et formulaires d'une page Web 7.3 Recherche dichotomique dans un tableau tri\u00e9 5.3 Architecture d'un r\u00e9seau 1.5 Repr\u00e9sentation des r\u00e9els: nombres flottants P\u00e9riode 5 7.4 Algorithmes gloutons 5.4 IHM, capteurs (Microbit) 7.5 Algorithme des \\(k\\) plus proches voisins https://cgouygou.github.io/1NSI/index.html Sources \u2693\ufe0e Bibliographie et Sitographie L'essentiel des sources des contenus de ce site:","title":"Accueil"},{"location":"#cours-de-nsi-premiere-groupe-de-m-gouygou","text":"Vous trouverez sur ce site tous les cours de l'ann\u00e9e en sp\u00e9cialit\u00e9 NSI.","title":"Cours de NSI - Premi\u00e8re - Groupe de M. Gouygou"},{"location":"#programme-et-progression","text":"Le programme de NSI est articul\u00e9 autour de sept th\u00e8mes Nous traiterons les diff\u00e9rentes entr\u00e9es du programme dans les chapitres suivants: Th\u00e8me 1 Th\u00e8me 1: Repr\u00e9sentation des donn\u00e9es, types et valeurs de base 1.1 \u00c9criture d'un entier positif dans une base \\(b \\geqslant 2\\) (2, 10 ou 16). 1.2 Valeurs et expressions bool\u00e9ennes 1.3 Repr\u00e9sentation binaire d'un entier relatif 1.4 Codage des caract\u00e8res 1.5 Repr\u00e9sentation des r\u00e9els: nombres flottants Th\u00e8me 2 Th\u00e8me 2: Repr\u00e9sentation des donn\u00e9es, types construits 2.1 Tableaux et listes 2.2 Dictionnaires Th\u00e8me 3 Th\u00e8me 3: Traitement de donn\u00e9es en tables 3.1 Manipulation, recherche et tri de tables 3.2 Fusion et jointure de tables Th\u00e8me 4 Th\u00e8me 4: Interaction entre l'homme et la machine (IHM) sur le Web 4.1 Pages Web et interactions 4.2 Protocole HTTP 4.3 Requ\u00eates GET/POST et formulaires d'une page Web Th\u00e8me 5 Th\u00e8me 5: Architectures mat\u00e9rielles et syst\u00e8mes d'exploitation 5.1 Mod\u00e8le de Von Neumann 5.2 Syst\u00e8mes d'exploitation 5.3 Architecture d'un r\u00e9seau 5.4 IHM, capteurs (Microbit) Th\u00e8me 6 Th\u00e8me 6: Langages et programmation 6.1 Prise en main de Python 6.2 Utilisation de biblioth\u00e8ques 6.3 Sp\u00e9cification 6.4 Jeux de tests Th\u00e8me 7 Th\u00e8me 7: Algorithmique 7.1 Parcours s\u00e9quentiel d'un tableau 7.2 Algorithmes de tri 7.3 Recherche dichotomique dans un tableau tri\u00e9 7.4 Algorithmes gloutons 7.5 Algorithme des \\(k\\) plus proches voisins Progression Cette progression est d\u00e9coup\u00e9e selon les 5 p\u00e9riodes entre les vacances. P\u00e9riode 1 6.1 Prise en main de Python 1.1 \u00c9criture d'un entier positif dans une base \\(b \\geqslant 2\\) (2, 10 ou 16). 6.2 Utilisation de biblioth\u00e8ques 1.2 Valeurs et expressions bool\u00e9ennes 1.3 Repr\u00e9sentation binaire d'un entier relatif P\u00e9riode 2 6.3 Sp\u00e9cification 6.4 Jeux de tests 2.1 Tableaux et listes 7.1 Parcours s\u00e9quentiel d'un tableau 1.4 Codage des caract\u00e8res 4.1 Pages Web et interactions P\u00e9riode 3 5.1 Mod\u00e8le de Von Neumann 2.2 Dictionnaires 3.1 Manipulation, recherche et tri de tables 3.2 Fusion et jointure de tables 5.2 Syst\u00e8mes d'exploitation 7.2 Algorithmes de tri P\u00e9riode 4 4.2 Protocole HTTP 4.3 Requ\u00eates GET/POST et formulaires d'une page Web 7.3 Recherche dichotomique dans un tableau tri\u00e9 5.3 Architecture d'un r\u00e9seau 1.5 Repr\u00e9sentation des r\u00e9els: nombres flottants P\u00e9riode 5 7.4 Algorithmes gloutons 5.4 IHM, capteurs (Microbit) 7.5 Algorithme des \\(k\\) plus proches voisins https://cgouygou.github.io/1NSI/index.html","title":"Programme et progression"},{"location":"#sources","text":"Bibliographie et Sitographie L'essentiel des sources des contenus de ce site:","title":"Sources"},{"location":"T01_TypesBase/accueil/","text":"Types de base \u2693\ufe0e Les machines ne manipulent pas les objets (textes, images, etc.) directement mais une repr\u00e9sentation de ces donn\u00e9es dont l'unit\u00e9 minimale est le bit (0/1).","title":"Types de base"},{"location":"T01_TypesBase/accueil/#types-de-base","text":"Les machines ne manipulent pas les objets (textes, images, etc.) directement mais une repr\u00e9sentation de ces donn\u00e9es dont l'unit\u00e9 minimale est le bit (0/1).","title":"Types de base"},{"location":"T01_TypesBase/T1.1_Bases/T1.1_Bases/","text":"1.1 \u00c9criture d'un entier dans une base \u2693\ufe0e Le monde se divise en 10 cat\u00e9gories : ceux qui comprennent le binaire et ceux qui ne le comprennent pas. 1. Le syst\u00e8me d\u00e9cimal \u2693\ufe0e Depuis la pr\u00e9histoire, l'Homme a besoin de compter. Sa premi\u00e8re id\u00e9e: Pas tr\u00e8s pratique... Heureusement, il en eut rapidemennt une autre, beaucoup plus efficace: regrouper les b\u00e2tons en paquets. Des paquets de 5 et surtout de 10. Pourquoi 10? Pour \u00e9crire les nombres, regroup\u00e9s en paquets de 10, il a donc fallu inventer 10 chiffres pour compter les unit\u00e9s (en-dessous du paquet): 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. Et le nombre 10 ne signifie ni plus ni moins que 1 paquet et 0 unit\u00e9. Ensuite, on fait un paquet de paquets, la centaine (100, c'est \u00e0 dire \\(10 \\times 10 = 10^2\\) ), puis un paquet de centaines, le millier (1000, c'est-\u00e0-dire \\(10\\times 10\\times10=10^3\\) ), et ainsi de suite. Au final, si on \u00e9crit le nombre 2021, on sait que c'est: 2 mille, c'est-\u00e0-dire \\(2\\times 10^3\\) ; 0 centaine, c'est-\u00e0-dire \\(0\\times 10^2\\) ; 2 dizaines, c'est-\u00e0-dire \\(2\\times 10^1\\) ; 1 unit\u00e9, c'est-\u00e0-dire \\(1\\times 10^0\\) . Et bien entendu, \\(2021 = 2\\times 10^3 + 0\\times 10^2+ 2\\times 10^1 +1\\times 10^0\\) La position de chaque chiffre dans l'\u00e9criture du nombre correspond \u00e0 la puissance de 10 par laquelle on le multiplie. Homer compte Octal D\u00e9cimal 0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 10 8 11 9 12 10 13 11 14 12 15 13 16 14 17 15 20 16 21 17 ... ... Un autre exemple, la base octale Pour Homer Simpson, qui n'a que 8 doigts, il aurait \u00e9t\u00e9 certainement plus naturel de faire des paquets de 8... et donc de manipuler seulement 8 chiffres : 0, 1, 2, 3, 4, 5, 6 et 7. C'est le syst\u00e8me octal . Ainsi, \u00abson\u00bb 10 signifierait 1 paquet de 8 et 0 unit\u00e9, soit \u00abnotre\u00bb 8... Et donc notre 10 (en d\u00e9cimal) s'\u00e9crirait 12 (en octal). Enfin, 2021 (en d\u00e9cimal) s'\u00e9crit 3745 en octal puisque : \\[\\begin{array}{rl} 3745_8 &= 3\\times 8^3+7\\times 8^2+4\\times 8^1+5\\times 8^0 \\\\ &= 8\\times 512+7\\times 64+4\\times 8+5\\times 1 \\\\ &= 1536+448+32+5\\\\ &= 2021 \\end{array} \\] 2. Notion de base \u2693\ufe0e \u00c9criture d'un entier en base \\(b\\) Choisir une base, c'est choisir la \u00abtaille\u00bb du paquet, et donc le nombre de chiffres dont on aura besoin: en base \\(b\\) , il y a \\(b\\) chiffres. Dans notre syst\u00e8me d\u00e9cimal, la base est \\(b=10\\) . La position de chaque chiffre correspond \u00e0 la puissance de \\(b\\) par laquelle on le multiplie. On pr\u00e9cisera la base (si diff\u00e9rente de 10) en indice en fin du nombre. Par exemple, le nombre \\(312_5\\) est \u00e9crit en base 5. Exemples \\[\\begin{array}{rl} 312_5 &= 3\\times 5^2 + 1\\times 5^1 + 2\\times 5^0 \\\\ &= 3\\times 25+1\\times 5+2\\times 1 \\\\ &= 82 \\end{array} \\] \\[\\begin{array}{rl} 25072_8 &= 2\\times 8^4 + 5\\times 8^3+0\\times 8^2+7\\times 8^1+2\\times 8^0 \\\\ &= 2\\times 4096 + 5\\times 512 + 7\\times 8 + 2\\times 1 \\\\ &= 10810 \\end{array} \\] 3. Le syst\u00e8me binaire (base 2) \u2693\ufe0e Le binaire Le syst\u00e8me binaire est le syst\u00e8me de num\u00e9ration de base \\(b=2\\) . Il utilise donc seulement deux chiffres, 0 et 1, appel\u00e9s bits (contraction de l'anglais binary digit). Il est particuli\u00e8rement adapt\u00e9 \u00e0 l'informatique car il permet d'unifier la logique (Vrai/Faux), le calcul et l'\u00e9lectronique (voir vid\u00e9o suivante). Un regroupement de 8 bits est appel\u00e9 un octet . Vid\u00e9o Conversions Binaire \u2192 D\u00e9cimal Il est utile de conna\u00eetre alors les puissances de 2 pour convertir rapidement de l'\u00e9criture binaire vers l'\u00e9criture d\u00e9cimale. Par exemple \\(10110101_2=128+32+16+4+1=181\\) . D\u00e9cimal \u2192 Binaire On peut utiliser l'algorithme de soustraction: on soustrait du nombre la plus grande puissance de 2 possible, et on recommence... On utilise l'algorithme de divisions: on effectue les divisions successives du nombre par 2. L'\u00e9criture en binaire est donn\u00e9e par les restes lus de bas en haut. D\u00e9cimal \u2192 Base quelconque Les deux algorithmes de soustraction et de divisions fonctionnent \u00e9galement pour la conversion du d\u00e9cimal vers n'importe quelle autre base. 4. Le syst\u00e8me hexad\u00e9cimal (base 16) \u2693\ufe0e L'hexad\u00e9cimal Le syst\u00e8me hexad\u00e9cimal est le syst\u00e8me de num\u00e9ration de base \\(b=16\\) . Il utilise donc 16 chiffres : 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Bien qu'il n\u00e9cessite plus de chiffres, ce syst\u00e8me donne des \u00e9critures plus courtes et particuli\u00e8rement pratique du fait que 16 est une puissance de 2 : la conversion entre les syst\u00e8mes binaire et hexad\u00e9cimal se fait sans calcul, uniquement par regroupement de 4 bits. Couleurs Le syst\u00e8me hexad\u00e9cimal est en particulier un mode de code informatique des couleurs. En effet une couleur (codage RGB) est compos\u00e9e de 3 valeurs correspondant aux composantes rouge, verte et bleue, et chacune de ces valeurs est un entier compris entre 0 et 255, c'est-\u00e0-dire entre 0 et FF en hexad\u00e9cimal: on peut les \u00e9crire avec seulement deux chiffres. Par exemple, la couleur rouge ci-contre a pour composantes (178, 26, 15), ce qui donne en hexad\u00e9cimal : (B2, 1A, 0F), qu'on \u00e9crit en g\u00e9n\u00e9ral de fa\u00e7on concat\u00e9n\u00e9e B21A0F et souvent pr\u00e9c\u00e9d\u00e9e d'un #. Convertisseur Un convertisseur bien utile. 5. Exercices \u2693\ufe0e 5.1 \u00c0 la main \u2693\ufe0e Exercices Exercice 1 Convertir de la base mentionn\u00e9e vers la base 10 (syst\u00e8me d\u00e9cimal). Attention, il y a un pi\u00e8ge... \\(131_6\\) \\(420_5\\) \\(1515_8\\) \\(716_4\\) \\(321_4\\) Exercice 2 Convertir les \u00e9critures d\u00e9cimales vers la base mentionn\u00e9e. 47 en base 5 92 en base 4 Exercice 3 Convertir du binaire vers le d\u00e9cimal. 1010 101110 10001101 11111111 Exercice 4 Convertir du d\u00e9cimal vers le binaire. 17 34 68 100 200 Que remarquez-vous quand on passe de l'\u00e9criture binaire d'un nombre \u00e0 celle de son double? Exercice 5 V\u00e9rifier la conversion de la couleur rouge donn\u00e9e en exemple \u00e0 la section pr\u00e9c\u00e9dente. Convertir les \u00e9critures hexad\u00e9cimales en d\u00e9cimal: 99, D7, 1B8, ABC. Comment s'\u00e9crit la couleur blanche en code hexad\u00e9cimal? Exercice 6 Convertir les \u00e9critures d\u00e9cimales en hexad\u00e9cimal. 45 72 421 Exercice 7 Conversion Binaire \u2192 Hexad\u00e9cimal On regroupe les bits par paquets de 4 (quitte \u00e0 ajouter des 0 pour compl\u00e9ter). On convertit chaque paquet en chiffre hexad\u00e9cimal. On concat\u00e8ne les chiffres Par exemple, \\(11111100101_2 = \\underbrace{0111}_{7} \\underbrace{1110}_{14=\\text{E}_{16}} \\underbrace{0101}_{5} = 7\\text{E}5_{16}\\) Conversion Hexad\u00e9cimal \u2192 Binaire On fait la m\u00eame chose dans l'autre sens. Application Convertir \\(101101_2\\) puis \\(10011011111_2\\) en base 16. Convertir \\(8\\text{D}_{16}\\) puis \\(1\\text{CA}7_{16}\\) en binaire. 5.2 Avec Python \u2693\ufe0e Fonctions de conversion Pour convertir un entier \u00e9crit en d\u00e9cimal vers le binaire ou l'hexad\u00e9cimal, on peut utiliser les fonctions bin et hex , qui renvoient des cha\u00eenes de caract\u00e8res. >>> bin ( 2021 ) '0b11111100101' >>> hex ( 2021 ) '0x7e5' >>> Les pr\u00e9fixes 0b et 0x indiquent que les \u00e9critures sont respectivement en base 2 et en base 16. R\u00e9ciproquement, pour convertir l'\u00e9criture d'un nombre \u00e9crit en base \\(b\\) vers le d\u00e9cimal, on utilise la fonction int en passant en arguments l'\u00e9criture en cha\u00eene de caract\u00e8res et la base. >>> int ( '11111100101' , 2 ) 2021 >>> int ( '7e5' , 16 ) 2021 >>> Exercice 8 Utilisez ces fonctions pour v\u00e9rifier vos r\u00e9sultats des exercices pr\u00e9c\u00e9dents. >>>","title":"1.1 \u00c9criture d'un entier dans une base"},{"location":"T01_TypesBase/T1.1_Bases/T1.1_Bases/#11-ecriture-dun-entier-dans-une-base","text":"Le monde se divise en 10 cat\u00e9gories : ceux qui comprennent le binaire et ceux qui ne le comprennent pas.","title":"1.1 \u00c9criture d'un entier dans une base"},{"location":"T01_TypesBase/T1.1_Bases/T1.1_Bases/#1-le-systeme-decimal","text":"Depuis la pr\u00e9histoire, l'Homme a besoin de compter. Sa premi\u00e8re id\u00e9e: Pas tr\u00e8s pratique... Heureusement, il en eut rapidemennt une autre, beaucoup plus efficace: regrouper les b\u00e2tons en paquets. Des paquets de 5 et surtout de 10. Pourquoi 10? Pour \u00e9crire les nombres, regroup\u00e9s en paquets de 10, il a donc fallu inventer 10 chiffres pour compter les unit\u00e9s (en-dessous du paquet): 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. Et le nombre 10 ne signifie ni plus ni moins que 1 paquet et 0 unit\u00e9. Ensuite, on fait un paquet de paquets, la centaine (100, c'est \u00e0 dire \\(10 \\times 10 = 10^2\\) ), puis un paquet de centaines, le millier (1000, c'est-\u00e0-dire \\(10\\times 10\\times10=10^3\\) ), et ainsi de suite. Au final, si on \u00e9crit le nombre 2021, on sait que c'est: 2 mille, c'est-\u00e0-dire \\(2\\times 10^3\\) ; 0 centaine, c'est-\u00e0-dire \\(0\\times 10^2\\) ; 2 dizaines, c'est-\u00e0-dire \\(2\\times 10^1\\) ; 1 unit\u00e9, c'est-\u00e0-dire \\(1\\times 10^0\\) . Et bien entendu, \\(2021 = 2\\times 10^3 + 0\\times 10^2+ 2\\times 10^1 +1\\times 10^0\\) La position de chaque chiffre dans l'\u00e9criture du nombre correspond \u00e0 la puissance de 10 par laquelle on le multiplie. Homer compte Octal D\u00e9cimal 0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 10 8 11 9 12 10 13 11 14 12 15 13 16 14 17 15 20 16 21 17 ... ... Un autre exemple, la base octale Pour Homer Simpson, qui n'a que 8 doigts, il aurait \u00e9t\u00e9 certainement plus naturel de faire des paquets de 8... et donc de manipuler seulement 8 chiffres : 0, 1, 2, 3, 4, 5, 6 et 7. C'est le syst\u00e8me octal . Ainsi, \u00abson\u00bb 10 signifierait 1 paquet de 8 et 0 unit\u00e9, soit \u00abnotre\u00bb 8... Et donc notre 10 (en d\u00e9cimal) s'\u00e9crirait 12 (en octal). Enfin, 2021 (en d\u00e9cimal) s'\u00e9crit 3745 en octal puisque : \\[\\begin{array}{rl} 3745_8 &= 3\\times 8^3+7\\times 8^2+4\\times 8^1+5\\times 8^0 \\\\ &= 8\\times 512+7\\times 64+4\\times 8+5\\times 1 \\\\ &= 1536+448+32+5\\\\ &= 2021 \\end{array} \\]","title":"1. Le syst\u00e8me d\u00e9cimal"},{"location":"T01_TypesBase/T1.1_Bases/T1.1_Bases/#2-notion-de-base","text":"\u00c9criture d'un entier en base \\(b\\) Choisir une base, c'est choisir la \u00abtaille\u00bb du paquet, et donc le nombre de chiffres dont on aura besoin: en base \\(b\\) , il y a \\(b\\) chiffres. Dans notre syst\u00e8me d\u00e9cimal, la base est \\(b=10\\) . La position de chaque chiffre correspond \u00e0 la puissance de \\(b\\) par laquelle on le multiplie. On pr\u00e9cisera la base (si diff\u00e9rente de 10) en indice en fin du nombre. Par exemple, le nombre \\(312_5\\) est \u00e9crit en base 5. Exemples \\[\\begin{array}{rl} 312_5 &= 3\\times 5^2 + 1\\times 5^1 + 2\\times 5^0 \\\\ &= 3\\times 25+1\\times 5+2\\times 1 \\\\ &= 82 \\end{array} \\] \\[\\begin{array}{rl} 25072_8 &= 2\\times 8^4 + 5\\times 8^3+0\\times 8^2+7\\times 8^1+2\\times 8^0 \\\\ &= 2\\times 4096 + 5\\times 512 + 7\\times 8 + 2\\times 1 \\\\ &= 10810 \\end{array} \\]","title":"2. Notion de base"},{"location":"T01_TypesBase/T1.1_Bases/T1.1_Bases/#3-le-systeme-binaire-base-2","text":"Le binaire Le syst\u00e8me binaire est le syst\u00e8me de num\u00e9ration de base \\(b=2\\) . Il utilise donc seulement deux chiffres, 0 et 1, appel\u00e9s bits (contraction de l'anglais binary digit). Il est particuli\u00e8rement adapt\u00e9 \u00e0 l'informatique car il permet d'unifier la logique (Vrai/Faux), le calcul et l'\u00e9lectronique (voir vid\u00e9o suivante). Un regroupement de 8 bits est appel\u00e9 un octet . Vid\u00e9o Conversions Binaire \u2192 D\u00e9cimal Il est utile de conna\u00eetre alors les puissances de 2 pour convertir rapidement de l'\u00e9criture binaire vers l'\u00e9criture d\u00e9cimale. Par exemple \\(10110101_2=128+32+16+4+1=181\\) . D\u00e9cimal \u2192 Binaire On peut utiliser l'algorithme de soustraction: on soustrait du nombre la plus grande puissance de 2 possible, et on recommence... On utilise l'algorithme de divisions: on effectue les divisions successives du nombre par 2. L'\u00e9criture en binaire est donn\u00e9e par les restes lus de bas en haut. D\u00e9cimal \u2192 Base quelconque Les deux algorithmes de soustraction et de divisions fonctionnent \u00e9galement pour la conversion du d\u00e9cimal vers n'importe quelle autre base.","title":"3. Le syst\u00e8me binaire (base 2)"},{"location":"T01_TypesBase/T1.1_Bases/T1.1_Bases/#4-le-systeme-hexadecimal-base-16","text":"L'hexad\u00e9cimal Le syst\u00e8me hexad\u00e9cimal est le syst\u00e8me de num\u00e9ration de base \\(b=16\\) . Il utilise donc 16 chiffres : 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Bien qu'il n\u00e9cessite plus de chiffres, ce syst\u00e8me donne des \u00e9critures plus courtes et particuli\u00e8rement pratique du fait que 16 est une puissance de 2 : la conversion entre les syst\u00e8mes binaire et hexad\u00e9cimal se fait sans calcul, uniquement par regroupement de 4 bits. Couleurs Le syst\u00e8me hexad\u00e9cimal est en particulier un mode de code informatique des couleurs. En effet une couleur (codage RGB) est compos\u00e9e de 3 valeurs correspondant aux composantes rouge, verte et bleue, et chacune de ces valeurs est un entier compris entre 0 et 255, c'est-\u00e0-dire entre 0 et FF en hexad\u00e9cimal: on peut les \u00e9crire avec seulement deux chiffres. Par exemple, la couleur rouge ci-contre a pour composantes (178, 26, 15), ce qui donne en hexad\u00e9cimal : (B2, 1A, 0F), qu'on \u00e9crit en g\u00e9n\u00e9ral de fa\u00e7on concat\u00e9n\u00e9e B21A0F et souvent pr\u00e9c\u00e9d\u00e9e d'un #. Convertisseur Un convertisseur bien utile.","title":"4. Le syst\u00e8me hexad\u00e9cimal (base 16)"},{"location":"T01_TypesBase/T1.1_Bases/T1.1_Bases/#5-exercices","text":"","title":"5. Exercices"},{"location":"T01_TypesBase/T1.1_Bases/T1.1_Bases/#51-a-la-main","text":"Exercices Exercice 1 Convertir de la base mentionn\u00e9e vers la base 10 (syst\u00e8me d\u00e9cimal). Attention, il y a un pi\u00e8ge... \\(131_6\\) \\(420_5\\) \\(1515_8\\) \\(716_4\\) \\(321_4\\) Exercice 2 Convertir les \u00e9critures d\u00e9cimales vers la base mentionn\u00e9e. 47 en base 5 92 en base 4 Exercice 3 Convertir du binaire vers le d\u00e9cimal. 1010 101110 10001101 11111111 Exercice 4 Convertir du d\u00e9cimal vers le binaire. 17 34 68 100 200 Que remarquez-vous quand on passe de l'\u00e9criture binaire d'un nombre \u00e0 celle de son double? Exercice 5 V\u00e9rifier la conversion de la couleur rouge donn\u00e9e en exemple \u00e0 la section pr\u00e9c\u00e9dente. Convertir les \u00e9critures hexad\u00e9cimales en d\u00e9cimal: 99, D7, 1B8, ABC. Comment s'\u00e9crit la couleur blanche en code hexad\u00e9cimal? Exercice 6 Convertir les \u00e9critures d\u00e9cimales en hexad\u00e9cimal. 45 72 421 Exercice 7 Conversion Binaire \u2192 Hexad\u00e9cimal On regroupe les bits par paquets de 4 (quitte \u00e0 ajouter des 0 pour compl\u00e9ter). On convertit chaque paquet en chiffre hexad\u00e9cimal. On concat\u00e8ne les chiffres Par exemple, \\(11111100101_2 = \\underbrace{0111}_{7} \\underbrace{1110}_{14=\\text{E}_{16}} \\underbrace{0101}_{5} = 7\\text{E}5_{16}\\) Conversion Hexad\u00e9cimal \u2192 Binaire On fait la m\u00eame chose dans l'autre sens. Application Convertir \\(101101_2\\) puis \\(10011011111_2\\) en base 16. Convertir \\(8\\text{D}_{16}\\) puis \\(1\\text{CA}7_{16}\\) en binaire.","title":"5.1 \u00c0 la main"},{"location":"T01_TypesBase/T1.1_Bases/T1.1_Bases/#52-avec-python","text":"Fonctions de conversion Pour convertir un entier \u00e9crit en d\u00e9cimal vers le binaire ou l'hexad\u00e9cimal, on peut utiliser les fonctions bin et hex , qui renvoient des cha\u00eenes de caract\u00e8res. >>> bin ( 2021 ) '0b11111100101' >>> hex ( 2021 ) '0x7e5' >>> Les pr\u00e9fixes 0b et 0x indiquent que les \u00e9critures sont respectivement en base 2 et en base 16. R\u00e9ciproquement, pour convertir l'\u00e9criture d'un nombre \u00e9crit en base \\(b\\) vers le d\u00e9cimal, on utilise la fonction int en passant en arguments l'\u00e9criture en cha\u00eene de caract\u00e8res et la base. >>> int ( '11111100101' , 2 ) 2021 >>> int ( '7e5' , 16 ) 2021 >>> Exercice 8 Utilisez ces fonctions pour v\u00e9rifier vos r\u00e9sultats des exercices pr\u00e9c\u00e9dents. >>>","title":"5.2 Avec Python"},{"location":"T01_TypesBase/T1.2_Booleens/T1.2_Booleens/","text":"1.2 Valeurs bool\u00e9ennes \u2693\ufe0e Histoire de l'informatique George Boole (1815-1864) est un math\u00e9maticien et logicien britannique connu pour avoir cr\u00e9\u00e9 la logique moderne, appel\u00e9e alg\u00e8bre de Boole . Cette alg\u00e8bre binaire n'accepte que deux valeurs, 0 et 1, et a donc d'importantes et nombreuses applications en informatique... 1. Un peu de logique \u2693\ufe0e En informatique, comme en math\u00e9matiques, on s'int\u00e9resse \u00e0 la valeur de v\u00e9rit\u00e9 de phrases ou d'expressions qui peuvent \u00eatre soit vraies, soit fausses. Mais rien d'autre, c'est le principe du tiers-exclu . Par exemple, que diriez-vous de ces phrases? A: Vous \u00eates en classe de premi\u00e8re. B: Baudelaire a \u00e9crit \u00abLes fleurs du mal\u00bb. C: La Terre est plate. D: \\(3 \\times 4 =12\\) . E: La lettre e est dans le mot abracadabra . F: Georges Perec a \u00e9crit un roman de pr\u00e8s de 300 pages sans aucune lettre e . G: \\(2^{10} < 10^3\\) H: La couleur orange est la plus belle des couleurs. 2. Alg\u00e8bre de Boole \u2693\ufe0e Valeurs et op\u00e9rations fondamentales L'alg\u00e8bre de Boole consiste \u00e0 \u00e9tudier des op\u00e9rations sur un ensemble uniquement constitu\u00e9 de deux \u00e9l\u00e9ments qu'on appelle bool\u00e9ens . Selon le contexte (logique, calcul, \u00e9lectronique), ces deux \u00e9l\u00e9ments sont not\u00e9s: Faux (F) / Vrai (V) 0 / 1 False / True (en Python, comme dans de nombreux langages) Les op\u00e9rations fondamentales ne sont plus l'addition et la multiplication mais: la n\u00e9gation , not\u00e9e \u00ac, ou plus simplement \u00abNON\u00bb ( not en Python); la conjonction , not\u00e9e &, ou plus simplement \u00abET\u00bb ( and en Python); la disjonction , not\u00e9e |, ou plus simplement \u00abOU\u00bb ( or en Python). Tables de v\u00e9rit\u00e9 N\u00e9gation, \u00ac, \u00abNON\u00bb, not x \u00acx F V V F Conjonction, &, \u00abET\u00bb, and x y x & y F F F F V F V F F V V V Disjonction, |, \u00abOU\u00bb, or x y x | y F F F F V V V F V V V V 3. Avec Python \u2693\ufe0e True & False Il existe deux valeurs bool\u00e9ennes en Python : True et False . Une variable prenant l'une de ces deux valeurs est de type bool . >>> type ( True ) < class ' bool '> >>> x = False >>> x False >>> type ( x ) < class ' bool '> Op\u00e9rateurs de comparaison Op\u00e9rateur Signification == est \u00e9gal \u00e0 != est diff\u00e9rent de < inf\u00e9rieur \u00e0 > sup\u00e9rieur \u00e0 << inf\u00e9rieur ou \u00e9gal \u00e0 >= sup\u00e9rieur ou \u00e9gal \u00e0 in appartient \u00e0 not in n'appartient pas \u00e0 Exemples >>> a = 2 >>> a == 3 False >>> a == 2 True >>> a != 1 True >>> a > 2 False >>> a <= 5 True >>> a % 2 == 0 True >>> x = ( 0 == 1 ) >>> x False >>> y = ( 3 + 2 == 5 ) >>> y True >>> 'e' in 'abracadabra' False >>> 'b' in 'abracadabra' True >>> 'A' not in 'abracadabra' True >>> not True False >>> True and False False >>> True and True True >>> False or True True >>> 4. Exercices \u2693\ufe0e Exercice 1 Pr\u00e9dire si les variables suivantes contiennent le bool\u00e9en True ou le bool\u00e9en False . Contr\u00f4lez ensuite en ex\u00e9cutant le code et en inspectant le contenu des variables. a = ( 2 > 1 ) b = ( 3 == 1 + 2 ) c = ( 1 < 0 ) d = ( 2 != 5 / 2 ) e = ( 2 != 5 // 2 ) f = ( 'a' == 'A' ) g = not a h = b and c i = b or c j = not c and ( d or e ) Exercice 2 : le \u00abou exclusif\u00bb Une autre fonction logique importante est le ou exclusif , ou \u00abdisjonction exclusive. C'est le \u00abou\u00bb dans le sens de \u00abFromage ou dessert\u00bb dans un menu au restaurant. Soit l'un, soit l'autre, mais pas les deux. Il se note en g\u00e9n\u00e9ral xor ou ^ en logique ( ^ en Python). Si x et y sont deux bool\u00e9ens, alors x ^ y = (x & \u00acy) | (\u00acx & y) . Construire la table de v\u00e9rit\u00e9 du xor . Exercice 3 Construire la table de v\u00e9rit\u00e9 de l'expression (x | y) & z o\u00f9 x, y et z sont trois bool\u00e9ens. Exercice 4 \u00c0 l'aide de tables de v\u00e9rit\u00e9, d\u00e9montrer les lois de Morgan: \u00ac(x | y) = \u00acx & \u00acy \u00ac(x & y) = \u00acx | \u00acy","title":"1.2 Valeurs bool\u00e9ennes"},{"location":"T01_TypesBase/T1.2_Booleens/T1.2_Booleens/#12-valeurs-booleennes","text":"Histoire de l'informatique George Boole (1815-1864) est un math\u00e9maticien et logicien britannique connu pour avoir cr\u00e9\u00e9 la logique moderne, appel\u00e9e alg\u00e8bre de Boole . Cette alg\u00e8bre binaire n'accepte que deux valeurs, 0 et 1, et a donc d'importantes et nombreuses applications en informatique...","title":"1.2 Valeurs bool\u00e9ennes"},{"location":"T01_TypesBase/T1.2_Booleens/T1.2_Booleens/#1-un-peu-de-logique","text":"En informatique, comme en math\u00e9matiques, on s'int\u00e9resse \u00e0 la valeur de v\u00e9rit\u00e9 de phrases ou d'expressions qui peuvent \u00eatre soit vraies, soit fausses. Mais rien d'autre, c'est le principe du tiers-exclu . Par exemple, que diriez-vous de ces phrases? A: Vous \u00eates en classe de premi\u00e8re. B: Baudelaire a \u00e9crit \u00abLes fleurs du mal\u00bb. C: La Terre est plate. D: \\(3 \\times 4 =12\\) . E: La lettre e est dans le mot abracadabra . F: Georges Perec a \u00e9crit un roman de pr\u00e8s de 300 pages sans aucune lettre e . G: \\(2^{10} < 10^3\\) H: La couleur orange est la plus belle des couleurs.","title":"1. Un peu de logique"},{"location":"T01_TypesBase/T1.2_Booleens/T1.2_Booleens/#2-algebre-de-boole","text":"Valeurs et op\u00e9rations fondamentales L'alg\u00e8bre de Boole consiste \u00e0 \u00e9tudier des op\u00e9rations sur un ensemble uniquement constitu\u00e9 de deux \u00e9l\u00e9ments qu'on appelle bool\u00e9ens . Selon le contexte (logique, calcul, \u00e9lectronique), ces deux \u00e9l\u00e9ments sont not\u00e9s: Faux (F) / Vrai (V) 0 / 1 False / True (en Python, comme dans de nombreux langages) Les op\u00e9rations fondamentales ne sont plus l'addition et la multiplication mais: la n\u00e9gation , not\u00e9e \u00ac, ou plus simplement \u00abNON\u00bb ( not en Python); la conjonction , not\u00e9e &, ou plus simplement \u00abET\u00bb ( and en Python); la disjonction , not\u00e9e |, ou plus simplement \u00abOU\u00bb ( or en Python). Tables de v\u00e9rit\u00e9 N\u00e9gation, \u00ac, \u00abNON\u00bb, not x \u00acx F V V F Conjonction, &, \u00abET\u00bb, and x y x & y F F F F V F V F F V V V Disjonction, |, \u00abOU\u00bb, or x y x | y F F F F V V V F V V V V","title":"2. Alg\u00e8bre de Boole"},{"location":"T01_TypesBase/T1.2_Booleens/T1.2_Booleens/#3-avec-python","text":"True & False Il existe deux valeurs bool\u00e9ennes en Python : True et False . Une variable prenant l'une de ces deux valeurs est de type bool . >>> type ( True ) < class ' bool '> >>> x = False >>> x False >>> type ( x ) < class ' bool '> Op\u00e9rateurs de comparaison Op\u00e9rateur Signification == est \u00e9gal \u00e0 != est diff\u00e9rent de < inf\u00e9rieur \u00e0 > sup\u00e9rieur \u00e0 << inf\u00e9rieur ou \u00e9gal \u00e0 >= sup\u00e9rieur ou \u00e9gal \u00e0 in appartient \u00e0 not in n'appartient pas \u00e0 Exemples >>> a = 2 >>> a == 3 False >>> a == 2 True >>> a != 1 True >>> a > 2 False >>> a <= 5 True >>> a % 2 == 0 True >>> x = ( 0 == 1 ) >>> x False >>> y = ( 3 + 2 == 5 ) >>> y True >>> 'e' in 'abracadabra' False >>> 'b' in 'abracadabra' True >>> 'A' not in 'abracadabra' True >>> not True False >>> True and False False >>> True and True True >>> False or True True >>>","title":"3. Avec Python"},{"location":"T01_TypesBase/T1.2_Booleens/T1.2_Booleens/#4-exercices","text":"Exercice 1 Pr\u00e9dire si les variables suivantes contiennent le bool\u00e9en True ou le bool\u00e9en False . Contr\u00f4lez ensuite en ex\u00e9cutant le code et en inspectant le contenu des variables. a = ( 2 > 1 ) b = ( 3 == 1 + 2 ) c = ( 1 < 0 ) d = ( 2 != 5 / 2 ) e = ( 2 != 5 // 2 ) f = ( 'a' == 'A' ) g = not a h = b and c i = b or c j = not c and ( d or e ) Exercice 2 : le \u00abou exclusif\u00bb Une autre fonction logique importante est le ou exclusif , ou \u00abdisjonction exclusive. C'est le \u00abou\u00bb dans le sens de \u00abFromage ou dessert\u00bb dans un menu au restaurant. Soit l'un, soit l'autre, mais pas les deux. Il se note en g\u00e9n\u00e9ral xor ou ^ en logique ( ^ en Python). Si x et y sont deux bool\u00e9ens, alors x ^ y = (x & \u00acy) | (\u00acx & y) . Construire la table de v\u00e9rit\u00e9 du xor . Exercice 3 Construire la table de v\u00e9rit\u00e9 de l'expression (x | y) & z o\u00f9 x, y et z sont trois bool\u00e9ens. Exercice 4 \u00c0 l'aide de tables de v\u00e9rit\u00e9, d\u00e9montrer les lois de Morgan: \u00ac(x | y) = \u00acx & \u00acy \u00ac(x & y) = \u00acx | \u00acy","title":"4. Exercices"},{"location":"T02_TypesConstruits/accueil/","text":"Types construits \u2693\ufe0e \u00c0 partir des types de bases, on construit des types conteneurs qui permettent de stocker diff\u00e9rents objets et d'y acc\u00e9der.","title":"Types construits"},{"location":"T02_TypesConstruits/accueil/#types-construits","text":"\u00c0 partir des types de bases, on construit des types conteneurs qui permettent de stocker diff\u00e9rents objets et d'y acc\u00e9der.","title":"Types construits"},{"location":"T02_TypesConstruits/T2.1_Tuples/2.1_Tuples/","text":"\u2693\ufe0e","title":"2.1 Tuples"},{"location":"T02_TypesConstruits/T2.1_Tuples/2.1_Tuples/#_1","text":"","title":""},{"location":"T03_TraitementDonnees/accueil/","text":"Traitement de donn\u00e9es en tables \u2693\ufe0e Afin de pouvoir \u00eatre trait\u00e9es efficacement, les donn\u00e9es doivent \u00eatre structur\u00e9es, \u00e0 l'aide de descripteurs communs.","title":"Traitement de donn\u00e9es en tables"},{"location":"T03_TraitementDonnees/accueil/#traitement-de-donnees-en-tables","text":"Afin de pouvoir \u00eatre trait\u00e9es efficacement, les donn\u00e9es doivent \u00eatre structur\u00e9es, \u00e0 l'aide de descripteurs communs.","title":"Traitement de donn\u00e9es en tables"},{"location":"T03_TraitementDonnees/T3.1_Manipulation/T3.1_Manipulation/","text":"3.1 Manipulation de tables \u2693\ufe0e Les tables de donn\u00e9es que nous manipulerons sont repr\u00e9sent\u00e9s par des fichiers csv .","title":"3.1 Manipulation de tables"},{"location":"T03_TraitementDonnees/T3.1_Manipulation/T3.1_Manipulation/#31-manipulation-de-tables","text":"Les tables de donn\u00e9es que nous manipulerons sont repr\u00e9sent\u00e9s par des fichiers csv .","title":"3.1 Manipulation de tables"},{"location":"T04_IHMWeb/accueil/","text":"Interactions entre l'homme et la machine sur le Web \u2693\ufe0e Lorsqu'on navigue sur le Web, nous interagissons avec une machine distante via des pages, qui g\u00e8rent des \u00e9v\u00e9nements (clics, soumissions de formulaires par exemple) qui doivent \u00eatre g\u00e9r\u00e9s automatiquement.","title":"Interactions entre l'homme et la machine sur le Web"},{"location":"T04_IHMWeb/accueil/#interactions-entre-lhomme-et-la-machine-sur-le-web","text":"Lorsqu'on navigue sur le Web, nous interagissons avec une machine distante via des pages, qui g\u00e8rent des \u00e9v\u00e9nements (clics, soumissions de formulaires par exemple) qui doivent \u00eatre g\u00e9r\u00e9s automatiquement.","title":"Interactions entre l'homme et la machine sur le Web"},{"location":"T04_IHMWeb/T4.1_Interactions/T4.1_Interactions/","text":"\u2693\ufe0e","title":"T4.1 Interactions"},{"location":"T04_IHMWeb/T4.1_Interactions/T4.1_Interactions/#_1","text":"","title":""},{"location":"T05_Architectures/accueil/","text":"Architectures mat\u00e9rielles et syst\u00e8mes d'exploitation \u2693\ufe0e Les circuits \u00e9lectroniques sont au c\u0153ur de toutes les machines informatiques. Les r\u00e9seaux permettent de transmettre l\u2019information entre machines. Les syst\u00e8mes d\u2019exploitation g\u00e8rent et optimisent l\u2019ensemble des fonctions de la machine, de l\u2019ex\u00e9cution des programmes aux entr\u00e9es-sorties et \u00e0 la gestion d\u2019\u00e9nergie.","title":"Architectures mat\u00e9rielles et syst\u00e8mes d'exploitation"},{"location":"T05_Architectures/accueil/#architectures-materielles-et-systemes-dexploitation","text":"Les circuits \u00e9lectroniques sont au c\u0153ur de toutes les machines informatiques. Les r\u00e9seaux permettent de transmettre l\u2019information entre machines. Les syst\u00e8mes d\u2019exploitation g\u00e8rent et optimisent l\u2019ensemble des fonctions de la machine, de l\u2019ex\u00e9cution des programmes aux entr\u00e9es-sorties et \u00e0 la gestion d\u2019\u00e9nergie.","title":"Architectures mat\u00e9rielles et syst\u00e8mes d'exploitation"},{"location":"T05_Architectures/T5.1_VonNeumann/T5.1_VonNeumann/","text":"\u2693\ufe0e","title":"T5.1 VonNeumann"},{"location":"T05_Architectures/T5.1_VonNeumann/T5.1_VonNeumann/#_1","text":"","title":""},{"location":"T06_Python/accueil/","text":"Langages et programmation \u2693\ufe0e Histoire de l'informatique John Backus (1924-2007) est l'auteur de l'un des premiers langages de programmation : le Fortran (1954). Il a par la suite propos\u00e9, avec Peter Naur, la notation de Backus Naur qui permet de d\u00e9crire des grammaires formelle pour langages de programmation... Grace Hopper (1906-1992) est une informaticienne am\u00e9ricaine, connue pour sa contribution \u00e0 la conception et \u00e0 la traduction des premiers langages de programmation, et comme l\u2019une des principales inspiratrices du langage COBOL. Les langages de programmation permettent de d\u00e9crire d'une part les structures des donn\u00e9es qui seront manipul\u00e9es par l'appareil informatique, et d'autre part d'indiquer comment sont effectu\u00e9es les manipulations, selon quels algorithmes. Ils servent de moyens de communication par lesquels le programmeur communique avec l'ordinateur, mais aussi avec d'autres programmeurs... Vid\u00e9o","title":"Langages et programmation"},{"location":"T06_Python/accueil/#langages-et-programmation","text":"Histoire de l'informatique John Backus (1924-2007) est l'auteur de l'un des premiers langages de programmation : le Fortran (1954). Il a par la suite propos\u00e9, avec Peter Naur, la notation de Backus Naur qui permet de d\u00e9crire des grammaires formelle pour langages de programmation... Grace Hopper (1906-1992) est une informaticienne am\u00e9ricaine, connue pour sa contribution \u00e0 la conception et \u00e0 la traduction des premiers langages de programmation, et comme l\u2019une des principales inspiratrices du langage COBOL. Les langages de programmation permettent de d\u00e9crire d'une part les structures des donn\u00e9es qui seront manipul\u00e9es par l'appareil informatique, et d'autre part d'indiquer comment sont effectu\u00e9es les manipulations, selon quels algorithmes. Ils servent de moyens de communication par lesquels le programmeur communique avec l'ordinateur, mais aussi avec d'autres programmeurs... Vid\u00e9o","title":"Langages et programmation"},{"location":"T06_Python/T6.1_Python/T6.1_0_Python/","text":"6.1.0 Prise en main de Python \u2693\ufe0e Pr\u00e9ambule \u2693\ufe0e Python \u2693\ufe0e Python est un langage de programmation invent\u00e9 en 1991 par Guido Van Rossum. Ce langage est un des langages les plus utilis\u00e9s actuellement (avec le C, le Java, le Javascript ...), notamment dans le monde scientifique. Il est aussi un des langages de d\u00e9veloppement de nombreuses applications (Spotify, Instagram, Netflix), des sites Web, de traitement de donn\u00e9es, du noyau Linux... Python fait \u00e0 peu pr\u00e8s tout ce qu'on veut. Sauf le caf\u00e9. Il est aussi parfaitement adapt\u00e9 \u00e0 la d\u00e9couverte de la programmation, de par sa clart\u00e9 et sa concision (il a aussi bien s\u00fbr beaucoup de d\u00e9fauts !). C'est pourquoi c'est le langage de programmation utilis\u00e9 au lyc\u00e9e en Math\u00e9matiques, en Physique-Chimie, en SNT et bien s\u00fbr maintenant en NSI. Ordinateur \u2693\ufe0e Mis \u00e0 part des calculs (beaucoup et tr\u00e8s rapidement), un ordinateur ne sait pas faire \u00e9norm\u00e9ment de choses... Il sait faire les instructions suivantes: - g\u00e9rer des donn\u00e9es stock\u00e9es dans des variables; - faire des tests (entre les valeurs des variables); - r\u00e9p\u00e9ter des instructions; - encha\u00eener des instructions. Et c'est (\u00e0 peu pr\u00e8s) tout. Citation Un ordinateur, c'est compl\u00e8tement con. Citation Programmer, c'est compliqu\u00e9. Ces deux citations sont de G\u00e9rard Berry, professeur d'Informatique au coll\u00e8ge de France. La premi\u00e8re signifie qu'un ordinateur ne prend pas de d\u00e9cision, et attend des instructions somme toute assez basiques. La seconde signifie que c'est \u00e0 l'\u00eatre humain de traduire sa fa\u00e7on de penser et de r\u00e9soudre en probl\u00e8me en une s\u00e9quence de ces quelques instructions basiques. Et ce n'est pas toujours simple. Bien s\u00fbr, il faut \u00e9galement conna\u00eetre la syntaxe de ces instructions, c'est-\u00e0-dire comment les \u00e9crire correctement pour que l'ordinateur puisse les interpr\u00e9ter sans erreur (car un ordinateur ne sait pas corriger vos erreurs, cf. citation 1). Et n'oubliez pas: Citation 99% des probl\u00e8mes en informatique se situent entre le clavier et la chaise. Utiliser Python \u2693\ufe0e Pour pouvoir utiliser un langage de programmation, en particulier Python, on a besoin d'un IDE (environnement de d\u00e9veloppement). Il en existe beaucoup... En ligne \u2693\ufe0e Rendez-vous sur la page https://console.basthon.fr/ \u00c9diteur \u00e0 gauche, console \u00e0 droite Au lyc\u00e9e / \u00e0 la maison \u2693\ufe0e Nous utiliserons l'IDE Thonny au lyc\u00e9e, qui est assez simple et complet. Si vous souhaitez installer Python sur votre PC \u00e0 la maison, je vous conseille de l'installer \u00e9galement. \u00c9diteur en haut, console en bas Ici, sur ce site \u2693\ufe0e Dans certaines activit\u00e9s, vous trouverez une console int\u00e9gr\u00e9e. Vous pouvez y entrer des instructions simples: >>> Ou bien un mini-IDE int\u00e9gr\u00e9: \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f","title":"6.1.0 Prise en main de Python"},{"location":"T06_Python/T6.1_Python/T6.1_0_Python/#610-prise-en-main-de-python","text":"","title":"6.1.0 Prise en main de Python"},{"location":"T06_Python/T6.1_Python/T6.1_0_Python/#preambule","text":"","title":"Pr\u00e9ambule"},{"location":"T06_Python/T6.1_Python/T6.1_0_Python/#python","text":"Python est un langage de programmation invent\u00e9 en 1991 par Guido Van Rossum. Ce langage est un des langages les plus utilis\u00e9s actuellement (avec le C, le Java, le Javascript ...), notamment dans le monde scientifique. Il est aussi un des langages de d\u00e9veloppement de nombreuses applications (Spotify, Instagram, Netflix), des sites Web, de traitement de donn\u00e9es, du noyau Linux... Python fait \u00e0 peu pr\u00e8s tout ce qu'on veut. Sauf le caf\u00e9. Il est aussi parfaitement adapt\u00e9 \u00e0 la d\u00e9couverte de la programmation, de par sa clart\u00e9 et sa concision (il a aussi bien s\u00fbr beaucoup de d\u00e9fauts !). C'est pourquoi c'est le langage de programmation utilis\u00e9 au lyc\u00e9e en Math\u00e9matiques, en Physique-Chimie, en SNT et bien s\u00fbr maintenant en NSI.","title":"Python"},{"location":"T06_Python/T6.1_Python/T6.1_0_Python/#ordinateur","text":"Mis \u00e0 part des calculs (beaucoup et tr\u00e8s rapidement), un ordinateur ne sait pas faire \u00e9norm\u00e9ment de choses... Il sait faire les instructions suivantes: - g\u00e9rer des donn\u00e9es stock\u00e9es dans des variables; - faire des tests (entre les valeurs des variables); - r\u00e9p\u00e9ter des instructions; - encha\u00eener des instructions. Et c'est (\u00e0 peu pr\u00e8s) tout. Citation Un ordinateur, c'est compl\u00e8tement con. Citation Programmer, c'est compliqu\u00e9. Ces deux citations sont de G\u00e9rard Berry, professeur d'Informatique au coll\u00e8ge de France. La premi\u00e8re signifie qu'un ordinateur ne prend pas de d\u00e9cision, et attend des instructions somme toute assez basiques. La seconde signifie que c'est \u00e0 l'\u00eatre humain de traduire sa fa\u00e7on de penser et de r\u00e9soudre en probl\u00e8me en une s\u00e9quence de ces quelques instructions basiques. Et ce n'est pas toujours simple. Bien s\u00fbr, il faut \u00e9galement conna\u00eetre la syntaxe de ces instructions, c'est-\u00e0-dire comment les \u00e9crire correctement pour que l'ordinateur puisse les interpr\u00e9ter sans erreur (car un ordinateur ne sait pas corriger vos erreurs, cf. citation 1). Et n'oubliez pas: Citation 99% des probl\u00e8mes en informatique se situent entre le clavier et la chaise.","title":"Ordinateur"},{"location":"T06_Python/T6.1_Python/T6.1_0_Python/#utiliser-python","text":"Pour pouvoir utiliser un langage de programmation, en particulier Python, on a besoin d'un IDE (environnement de d\u00e9veloppement). Il en existe beaucoup...","title":"Utiliser Python"},{"location":"T06_Python/T6.1_Python/T6.1_0_Python/#en-ligne","text":"Rendez-vous sur la page https://console.basthon.fr/ \u00c9diteur \u00e0 gauche, console \u00e0 droite","title":"En ligne"},{"location":"T06_Python/T6.1_Python/T6.1_0_Python/#au-lycee-a-la-maison","text":"Nous utiliserons l'IDE Thonny au lyc\u00e9e, qui est assez simple et complet. Si vous souhaitez installer Python sur votre PC \u00e0 la maison, je vous conseille de l'installer \u00e9galement. \u00c9diteur en haut, console en bas","title":"Au lyc\u00e9e / \u00e0 la maison"},{"location":"T06_Python/T6.1_Python/T6.1_0_Python/#ici-sur-ce-site","text":"Dans certaines activit\u00e9s, vous trouverez une console int\u00e9gr\u00e9e. Vous pouvez y entrer des instructions simples: >>> Ou bien un mini-IDE int\u00e9gr\u00e9: \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f","title":"Ici, sur ce site"},{"location":"T06_Python/T6.1_Python/T6.1_1_Variables/","text":"6.1.1 Les variables \u2693\ufe0e \u00c9crire un programme, c'est traiter des donn\u00e9es. Le plus souvent num\u00e9riques en cours de Math\u00e9matiques ou de Physique-Chimie, elles peuvent \u00eatre aussi d'autres types en NSI: cha\u00eene de caract\u00e8res (texte), tableaux (ensemble de valeurs), bool\u00e9ens (vrai/faux), ... Pour stocker, manipuler et modifier ces donn\u00e9es au fil du programme, on cr\u00e9e des variables qui vont permettre de les nommer ces donn\u00e9es et d'y avoir acc\u00e8s simplement. 1. Affectation \u2693\ufe0e Admettons qu'on souhaite programmer un jeu de combat de Pok\u00e9mons (ou tout autre personnage). Dans ce programme il faudra prendre en compte de nombreux attributs des Pok\u00e9mons, par exemple les points de vie (PV). Pour chaque Pok\u00e9mon, ces PV sont assez \u00e9videmment amen\u00e9s \u00e0 varier tout au long de l'ex\u00e9cution du programme. Le programmeur ne peut donc pas conna\u00eetre la valeur de ces PV pendant le programme. Il lui faut manipuler une variable, c'est \u00e0 dire un nom associ\u00e9 \u00e0 cette valeur , qui elle est stock\u00e9e en m\u00e9moire. Notion de variable Une variable est une association entre un nom (son identifiant, voir 4. ) et une valeur (de n'importe quel type, voir 3. ). Associer une valeur \u00e0 une variable (nouvelle ou d\u00e9j\u00e0 cr\u00e9\u00e9) s'appelle une affectation . Par exemple, si mon Pok\u00e9mon a 80 points de vie en d\u00e9but de partie, je peux cr\u00e9er une variable en affectant la valeur 80 au nom pv . En Python, on \u00e9crira: pv = 80 Vocabulaire Par abus de langage, on confond souvent variable et nom de variable . Ici on parlera de la variable pv . La premi\u00e8re fois qu'on affecte une valeur \u00e0 une variable, on dit qu'on l'initialise . Attention Le symbole = n'a rien \u00e0 voir avec le symbole \\(=\\) utilis\u00e9 en math\u00e9matiques. On commence toujours \u00e0 gauche par la variable \u00e0 affecter, cette instruction n'est pas sym\u00e9trique . On obtiendrait une erreur (essayez) avec: 80 = pv En effet cette instruction est lue par Python de droite \u00e0 gauche : on met la valeur 80 dans la variable pv . En langage naturel dans un algorithme, on \u00e9crirait : pv \u2190 80 . C'est ainsi qu'il faut se le repr\u00e9senter mentalement. On peut 1 se repr\u00e9senter cette affectation par une m\u00e9taphore, o\u00f9 l'on repr\u00e9sente la m\u00e9moire de l'ordinateur comme une gigantesque commode avec d'innombrables tiroirs. \u00c9tape 1: Lorsqu'on affecte la valeur 80 \u00e0 la variable pv , l'ordinateur commence par trouver un tiroir vide. \u00c9tape 2: Ensuite il nomme ce tiroir pv , comme s'il lui collait une \u00e9tiquette dessus. \u00c9tape 3: Enfin il d\u00e9pose dans ce tiroir la valeur 80 . D\u00e9sormais - tant qu'on ne lui aura pas affect\u00e9 une autre valeur - chaque fois qu'on utilisera la variable pv dans notre programme, l'ordinateur utilisera la valeur 80 . Si on affecte une nouvelle valeur \u00e0 la variable pv , alors l'ancienne dispara\u00eet (on dit qu'elle est \u00e9cras\u00e9e). 2. Expressions et \u00e9valuation \u2693\ufe0e Regardons l'exemple suivant: >>> a = 2 >>> a = 4 >>> a 4 >>> b = a + 3 >>> b 7 >>> b = c + 1 Traceback ( most recent call last ): File \"<pyshell>\" , line 1 , in < module > NameError : name 'c' is not defined >>> Analyse ligne par ligne Ligne 1 On initialise la variable a \u00e0 2 . Ligne 2 On r\u00e9affecte une nouvelle valeur, 4 , \u00e0 la variable a . Lignes 3 et 4 On demande la valeur associ\u00e9e \u00e0 a . Python r\u00e9pond logiquement 4 : la valeur 2 a \u00e9t\u00e9 \u00e9cras\u00e9e. Ligne 5 On cr\u00e9e une nouvelle variable b \u00e0 laquelle on affecte a + 3 . Ceci est une expression , Python doit au pr\u00e9alable l'\u00e9valuer avant de l'affecter. Dans l'ordre: Python lit d'abord le membre de droite a + 3 . Il r\u00e9cup\u00e8re la valeur stock\u00e9e dans a , c'est-\u00e0-dire 4 . Il \u00e9value ensuite l'expression, ici il fait une addition : 4 + 3 . Il affecte \u00e0 b la somme obtenue, c'est-\u00e0-dire 7 . On le v\u00e9rifie aux lignes 6 et 7. Ligne 8 On r\u00e9affecte \u00e0 b le r\u00e9sultat de l'expression c + 1 . Or aucune variable nomm\u00e9e c n'a \u00e9t\u00e9 d\u00e9clar\u00e9e : on obtient une erreur, puisque Python n'a pas de valeur associ\u00e9e \u00e0 c . 3. Types de variables \u2693\ufe0e Pour l'instant, les variables que nous avons manipul\u00e9es contiennent toutes des nombres entiers. Mais imaginons un programme qui doive manipuler les noms des Pokemons... Ce ne seront plus des nombres, mais des mots cha\u00eenes de caract\u00e8res. Pour diff\u00e9rencier la nature de ce que peut contenir une variable, on parle alors de type de variable . En voici quelques uns, que nous d\u00e9couvrirons au fil de l'ann\u00e9e : Types de base Voici les types Python les plus fr\u00e9quemment utilis\u00e9s cette ann\u00e9e: Type Python Traduction Exemple int entier 42 float flottant (d\u00e9cimal) 3.1416 str cha\u00eene de caract\u00e8res (string) \"NSI\" bool bool\u00e9en (True ou False) True tuple p-uplet (255, 127, 0) list liste [0, 1, 2, 3, 4, 5] dict dictionnaire {'Homer':43, 'Marge':41, 'Bart':12, 'Lisa':10, 'Maggie':4} function fonction print Conna\u00eetre le type d'une variable Il suffit dans la console d'utiliser la fonction type . >>> a = 1 >>> type ( a ) < class ' int '> >>> Essayez avec une variable du type str : >>> En cas d'erreur Une cha\u00eene de caract\u00e8res s'\u00e9crit avec des guillemets. Sans, Python l'interpr\u00e8te comme une variable... Jusqu'\u00e0 pr\u00e9sent, nous ne nous sommes pas occup\u00e9s de pr\u00e9ciser \u00e0 Python le type de notre variable. a = 1 Mais dans certains langages, c'est obligatoire ! En C par exemple, il faut \u00e9crire : int a = 1 ; Cela signifie (pour le langage C) que notre variable a n'aura pas le droit de contenir autre chose qu'un nombre entier. Si on \u00e9crit ensuite a = \"test\" ; Le compilateur C renverra une erreur : on ne peut pas stocker une cha\u00eene de caract\u00e8res dans une variable qu'on a cr\u00e9\u00e9e comme \u00e9tant de type entier. Et en Python ? >>> a = 1 >>> type ( a ) < class ' int '> >>> a = \"test\" >>> type ( a ) < class ' str '> Python a chang\u00e9 tout seul le type de notre variable, sans intervention ! On parle de typage dynamique . Source d'erreurs Ce typage dynamique, s'il all\u00e8ge la d\u00e9claration de variables, peut \u00e9galement \u00eatre la cause de bugs... C'est pourquoi il faut toujours avoir en t\u00eate le type des variables qu'on manipule. 4. R\u00e8gles de nommage \u2693\ufe0e Pour nommer correctement une variable, il existe des r\u00e8gles \u00e0 respecter. R\u00e8gles obligatoires le nom de la variable ne peut contenir que les caract\u00e8res suivants: des lettres non accentu\u00e9es (attention, minuscule et majuscule sont des caract\u00e8res diff\u00e9rents) des chiffres (mais pas comme premier caract\u00e8re) le tiret du bas _ (underscore, tiret du 8) le nom de la variable ne doit pas commencer par un chiffre; le nom de la variable ne doit pas contenir d'espace; le nom de la variable ne doit pas \u00eatre un mot cl\u00e9 du langage. Mots cl\u00e9 de Python and as assert break class continue def del elif else except False finally for from global if import in is lambda None not or pass raise return True try while with yield Hormis pour les indices (de boucles, de tableaux...) un nom de variable (dans un programme destin\u00e9 \u00e0 \u00eatre lu, par vous ou quelqu'un d'autre) doit imp\u00e9rativement avoir du sens Oui mais pour donner du sens, il faut souvent plusieurs mots... La longueur du nom de la variable n'est plus un probl\u00e8me depuis que la grande majorit\u00e9 des IDE proposent la compl\u00e9tion automatique. Mais comment former ces longs mots ? Comment accoler des mots S'il est compos\u00e9, le nom peut \u00eatre de la forme: snake_case : les mots sont s\u00e9par\u00e9s par des underscores. Conseill\u00e9 en Python. camelCase : les mots sont s\u00e9par\u00e9s par des majuscules mais la 1\u00e8re lettre est minuscule. Conseill\u00e9 en Javascript. PascalCase : les mots sont s\u00e9par\u00e9s par des majuscules et la 1\u00e8re lettre est majuscule. Conseill\u00e9 en C. kebab-case : les mots sont s\u00e9par\u00e9s par des tirets courts. Conseill\u00e9 en HTML - CSS. Sans surprise, en Python, nous utiliserons donc le snake_case . R\u00e8gle d'or On ne donne jamais un nom de variable au hasard, on le choisit pour qu'il soit explicite . C'est-\u00e0-dire que si on doit manipuler une variable qui stocke l'\u00e2ge du capitaine, il faut l'\u00e9crire non pas a mais age_capitaine . # PAS BIEN if d == 1 : cep += vm # BIEN if date == 1 : compte_epargne += versement_mensuel 5. Exercices \u2693\ufe0e T\u00e9l\u00e9chargez le notebook d'exercices : T6.1_Exercices1.ipynb Mais ce n'est pas tout \u00e0 fait exact. On verra exactement plus tard comment cela se passe. Pour l'instant, cette image mentale suffira. \u21a9","title":"6.1.1 Les variables"},{"location":"T06_Python/T6.1_Python/T6.1_1_Variables/#611-les-variables","text":"\u00c9crire un programme, c'est traiter des donn\u00e9es. Le plus souvent num\u00e9riques en cours de Math\u00e9matiques ou de Physique-Chimie, elles peuvent \u00eatre aussi d'autres types en NSI: cha\u00eene de caract\u00e8res (texte), tableaux (ensemble de valeurs), bool\u00e9ens (vrai/faux), ... Pour stocker, manipuler et modifier ces donn\u00e9es au fil du programme, on cr\u00e9e des variables qui vont permettre de les nommer ces donn\u00e9es et d'y avoir acc\u00e8s simplement.","title":"6.1.1 Les variables"},{"location":"T06_Python/T6.1_Python/T6.1_1_Variables/#1-affectation","text":"Admettons qu'on souhaite programmer un jeu de combat de Pok\u00e9mons (ou tout autre personnage). Dans ce programme il faudra prendre en compte de nombreux attributs des Pok\u00e9mons, par exemple les points de vie (PV). Pour chaque Pok\u00e9mon, ces PV sont assez \u00e9videmment amen\u00e9s \u00e0 varier tout au long de l'ex\u00e9cution du programme. Le programmeur ne peut donc pas conna\u00eetre la valeur de ces PV pendant le programme. Il lui faut manipuler une variable, c'est \u00e0 dire un nom associ\u00e9 \u00e0 cette valeur , qui elle est stock\u00e9e en m\u00e9moire. Notion de variable Une variable est une association entre un nom (son identifiant, voir 4. ) et une valeur (de n'importe quel type, voir 3. ). Associer une valeur \u00e0 une variable (nouvelle ou d\u00e9j\u00e0 cr\u00e9\u00e9) s'appelle une affectation . Par exemple, si mon Pok\u00e9mon a 80 points de vie en d\u00e9but de partie, je peux cr\u00e9er une variable en affectant la valeur 80 au nom pv . En Python, on \u00e9crira: pv = 80 Vocabulaire Par abus de langage, on confond souvent variable et nom de variable . Ici on parlera de la variable pv . La premi\u00e8re fois qu'on affecte une valeur \u00e0 une variable, on dit qu'on l'initialise . Attention Le symbole = n'a rien \u00e0 voir avec le symbole \\(=\\) utilis\u00e9 en math\u00e9matiques. On commence toujours \u00e0 gauche par la variable \u00e0 affecter, cette instruction n'est pas sym\u00e9trique . On obtiendrait une erreur (essayez) avec: 80 = pv En effet cette instruction est lue par Python de droite \u00e0 gauche : on met la valeur 80 dans la variable pv . En langage naturel dans un algorithme, on \u00e9crirait : pv \u2190 80 . C'est ainsi qu'il faut se le repr\u00e9senter mentalement. On peut 1 se repr\u00e9senter cette affectation par une m\u00e9taphore, o\u00f9 l'on repr\u00e9sente la m\u00e9moire de l'ordinateur comme une gigantesque commode avec d'innombrables tiroirs. \u00c9tape 1: Lorsqu'on affecte la valeur 80 \u00e0 la variable pv , l'ordinateur commence par trouver un tiroir vide. \u00c9tape 2: Ensuite il nomme ce tiroir pv , comme s'il lui collait une \u00e9tiquette dessus. \u00c9tape 3: Enfin il d\u00e9pose dans ce tiroir la valeur 80 . D\u00e9sormais - tant qu'on ne lui aura pas affect\u00e9 une autre valeur - chaque fois qu'on utilisera la variable pv dans notre programme, l'ordinateur utilisera la valeur 80 . Si on affecte une nouvelle valeur \u00e0 la variable pv , alors l'ancienne dispara\u00eet (on dit qu'elle est \u00e9cras\u00e9e).","title":"1. Affectation"},{"location":"T06_Python/T6.1_Python/T6.1_1_Variables/#2-expressions-et-evaluation","text":"Regardons l'exemple suivant: >>> a = 2 >>> a = 4 >>> a 4 >>> b = a + 3 >>> b 7 >>> b = c + 1 Traceback ( most recent call last ): File \"<pyshell>\" , line 1 , in < module > NameError : name 'c' is not defined >>> Analyse ligne par ligne Ligne 1 On initialise la variable a \u00e0 2 . Ligne 2 On r\u00e9affecte une nouvelle valeur, 4 , \u00e0 la variable a . Lignes 3 et 4 On demande la valeur associ\u00e9e \u00e0 a . Python r\u00e9pond logiquement 4 : la valeur 2 a \u00e9t\u00e9 \u00e9cras\u00e9e. Ligne 5 On cr\u00e9e une nouvelle variable b \u00e0 laquelle on affecte a + 3 . Ceci est une expression , Python doit au pr\u00e9alable l'\u00e9valuer avant de l'affecter. Dans l'ordre: Python lit d'abord le membre de droite a + 3 . Il r\u00e9cup\u00e8re la valeur stock\u00e9e dans a , c'est-\u00e0-dire 4 . Il \u00e9value ensuite l'expression, ici il fait une addition : 4 + 3 . Il affecte \u00e0 b la somme obtenue, c'est-\u00e0-dire 7 . On le v\u00e9rifie aux lignes 6 et 7. Ligne 8 On r\u00e9affecte \u00e0 b le r\u00e9sultat de l'expression c + 1 . Or aucune variable nomm\u00e9e c n'a \u00e9t\u00e9 d\u00e9clar\u00e9e : on obtient une erreur, puisque Python n'a pas de valeur associ\u00e9e \u00e0 c .","title":"2. Expressions et \u00e9valuation"},{"location":"T06_Python/T6.1_Python/T6.1_1_Variables/#3-types-de-variables","text":"Pour l'instant, les variables que nous avons manipul\u00e9es contiennent toutes des nombres entiers. Mais imaginons un programme qui doive manipuler les noms des Pokemons... Ce ne seront plus des nombres, mais des mots cha\u00eenes de caract\u00e8res. Pour diff\u00e9rencier la nature de ce que peut contenir une variable, on parle alors de type de variable . En voici quelques uns, que nous d\u00e9couvrirons au fil de l'ann\u00e9e : Types de base Voici les types Python les plus fr\u00e9quemment utilis\u00e9s cette ann\u00e9e: Type Python Traduction Exemple int entier 42 float flottant (d\u00e9cimal) 3.1416 str cha\u00eene de caract\u00e8res (string) \"NSI\" bool bool\u00e9en (True ou False) True tuple p-uplet (255, 127, 0) list liste [0, 1, 2, 3, 4, 5] dict dictionnaire {'Homer':43, 'Marge':41, 'Bart':12, 'Lisa':10, 'Maggie':4} function fonction print Conna\u00eetre le type d'une variable Il suffit dans la console d'utiliser la fonction type . >>> a = 1 >>> type ( a ) < class ' int '> >>> Essayez avec une variable du type str : >>> En cas d'erreur Une cha\u00eene de caract\u00e8res s'\u00e9crit avec des guillemets. Sans, Python l'interpr\u00e8te comme une variable... Jusqu'\u00e0 pr\u00e9sent, nous ne nous sommes pas occup\u00e9s de pr\u00e9ciser \u00e0 Python le type de notre variable. a = 1 Mais dans certains langages, c'est obligatoire ! En C par exemple, il faut \u00e9crire : int a = 1 ; Cela signifie (pour le langage C) que notre variable a n'aura pas le droit de contenir autre chose qu'un nombre entier. Si on \u00e9crit ensuite a = \"test\" ; Le compilateur C renverra une erreur : on ne peut pas stocker une cha\u00eene de caract\u00e8res dans une variable qu'on a cr\u00e9\u00e9e comme \u00e9tant de type entier. Et en Python ? >>> a = 1 >>> type ( a ) < class ' int '> >>> a = \"test\" >>> type ( a ) < class ' str '> Python a chang\u00e9 tout seul le type de notre variable, sans intervention ! On parle de typage dynamique . Source d'erreurs Ce typage dynamique, s'il all\u00e8ge la d\u00e9claration de variables, peut \u00e9galement \u00eatre la cause de bugs... C'est pourquoi il faut toujours avoir en t\u00eate le type des variables qu'on manipule.","title":"3. Types de variables"},{"location":"T06_Python/T6.1_Python/T6.1_1_Variables/#4-regles-de-nommage","text":"Pour nommer correctement une variable, il existe des r\u00e8gles \u00e0 respecter. R\u00e8gles obligatoires le nom de la variable ne peut contenir que les caract\u00e8res suivants: des lettres non accentu\u00e9es (attention, minuscule et majuscule sont des caract\u00e8res diff\u00e9rents) des chiffres (mais pas comme premier caract\u00e8re) le tiret du bas _ (underscore, tiret du 8) le nom de la variable ne doit pas commencer par un chiffre; le nom de la variable ne doit pas contenir d'espace; le nom de la variable ne doit pas \u00eatre un mot cl\u00e9 du langage. Mots cl\u00e9 de Python and as assert break class continue def del elif else except False finally for from global if import in is lambda None not or pass raise return True try while with yield Hormis pour les indices (de boucles, de tableaux...) un nom de variable (dans un programme destin\u00e9 \u00e0 \u00eatre lu, par vous ou quelqu'un d'autre) doit imp\u00e9rativement avoir du sens Oui mais pour donner du sens, il faut souvent plusieurs mots... La longueur du nom de la variable n'est plus un probl\u00e8me depuis que la grande majorit\u00e9 des IDE proposent la compl\u00e9tion automatique. Mais comment former ces longs mots ? Comment accoler des mots S'il est compos\u00e9, le nom peut \u00eatre de la forme: snake_case : les mots sont s\u00e9par\u00e9s par des underscores. Conseill\u00e9 en Python. camelCase : les mots sont s\u00e9par\u00e9s par des majuscules mais la 1\u00e8re lettre est minuscule. Conseill\u00e9 en Javascript. PascalCase : les mots sont s\u00e9par\u00e9s par des majuscules et la 1\u00e8re lettre est majuscule. Conseill\u00e9 en C. kebab-case : les mots sont s\u00e9par\u00e9s par des tirets courts. Conseill\u00e9 en HTML - CSS. Sans surprise, en Python, nous utiliserons donc le snake_case . R\u00e8gle d'or On ne donne jamais un nom de variable au hasard, on le choisit pour qu'il soit explicite . C'est-\u00e0-dire que si on doit manipuler une variable qui stocke l'\u00e2ge du capitaine, il faut l'\u00e9crire non pas a mais age_capitaine . # PAS BIEN if d == 1 : cep += vm # BIEN if date == 1 : compte_epargne += versement_mensuel","title":"4. R\u00e8gles de nommage"},{"location":"T06_Python/T6.1_Python/T6.1_1_Variables/#5-exercices","text":"T\u00e9l\u00e9chargez le notebook d'exercices : T6.1_Exercices1.ipynb Mais ce n'est pas tout \u00e0 fait exact. On verra exactement plus tard comment cela se passe. Pour l'instant, cette image mentale suffira. \u21a9","title":"5. Exercices"},{"location":"T06_Python/T6.1_Python/T6.1_2_For/","text":"6.1.2 La boucle for \u2693\ufe0e Un ordinateur est fait pour effectuer des calculs longs et r\u00e9p\u00e9titifs . 1. Le principe \u2693\ufe0e Imaginons - nous sommes en 2074 - une maman (ou un papa) qui souhaite faire manger \u00e0 son enfant les 10 derni\u00e8res cuill\u00e8res de soupe... en programmant son robot domestique pour qu'il annonce ces phrases \u00e0 sa place. On pourrait imaginer un code qui ressemble \u00e0 \u00e7a: print ( \"Une cuill\u00e8re pour maman\" ) print ( \"Une cuill\u00e8re pour papa\" ) print ( \"Une cuill\u00e8re pour mamie Fran\u00e7oise\" ) print ( \"Une cuill\u00e8re pour papy Jacques\" ) print ( \"Une cuill\u00e8re pour m\u00e9m\u00e9 Paulette\" ) print ( \"Une cuill\u00e8re pour tata Jacqueline\" ) print ( \"Une cuill\u00e8re pour tonton Michel\" ) print ( \"Une cuill\u00e8re pour le cousin Maurice\" ) print ( \"Une cuill\u00e8re pour la cousine Gertrude\" ) print ( \"Une cuill\u00e8re pour M\u00e9dor\" ) C'est tr\u00e8s r\u00e9p\u00e9titif. Et heureusement qu'il n'y a que 10 cuill\u00e8res... D'autant que chaque instruction est quasiment identique, seul le nom du membre de la famille change. En fran\u00e7ais, on serait tent\u00e9 de r\u00e9sumer en \u00abannonce une cuill\u00e8re pour chacun des 10 membres de la famille\u00bb Heureusement, dans tous les langages de programmation, il existe une instruction qui permet de r\u00e9p\u00e9ter une instruction (ou plusieurs instructions) pour chaque \u00e9l\u00e9ment d'un ensemble de valeurs donn\u00e9 : la boucle for . Vocabulaire En programmation, on parle de boucle pour toute instruction qui permet de r\u00e9p\u00e9ter des instructions. On utilise plut\u00f4t le verbe it\u00e9rer et on parle d' it\u00e9rations . 2. Les ensembles de valeurs \u00e9num\u00e9rables / it\u00e9rables \u2693\ufe0e En math\u00e9matiques, on dit qu'un ensemble est d\u00e9nombrable lorsqu'on peut associer \u00e0 chaque \u00e9l\u00e9ment de l'ensemble un nombre (traditionnellement 1, 2, 3...) les fraises Tagada d'un paquet sont d\u00e9nombrables. les voitures qui roulent sur l'autoroute sont d\u00e9nombrables. l'eau qui coule d'un robinet n'est pas d\u00e9nombrable. En informatique, il existe un concept similaire qui va d\u00e9signer les objets que l'on peut \u00e9num\u00e9rer , c'est-\u00e0-dire les d\u00e9composer en une succession ordonn\u00e9e d'\u00e9l\u00e9ments. On les appelle les \u00e9num\u00e9rables ou les it\u00e9rables (Python utilise le mot anglais iterable ). la variable NSI (qui est de type string ) est \u00e9num\u00e9rable : on peut la d\u00e9composer en N , S , I . la variable [4, 3, 17] (qui est de type list 1 ) est \u00e9num\u00e9rable : on peut la d\u00e9composer en 4 , 3 , 17 . la variable 5 (qui est de type int ) n'est PAS \u00e9num\u00e9rable : on ne peut pas la d\u00e9composer. 3. La syntaxe \u2693\ufe0e La boucle for Pour mettre en place cette boucle, on a besoin d'identifier: les instructions \u00e0 r\u00e9p\u00e9ter; pour quelles valeurs diff\u00e9rentes on doit les r\u00e9p\u00e9ter: on a donc besoin d'une variable et d'un iterable que cette variable va parcourir; identifier dans les instructions ce qui d\u00e9pend de cette variable de boucle. Syntaxe g\u00e9n\u00e9rale: for var in iterable : * instructions \u00e0 r\u00e9p\u00e9ter * o\u00f9 var est un nom de variable (non pr\u00e9c\u00e9demment d\u00e9clar\u00e9e dans le programme), iterable un objet ... it\u00e9rable. On dit que var parcourt l'ensemble iterable . Exemples essentiels \u00e0 tester avec une cha\u00eene de caract\u00e8res for l in \"INRIA\" : print ( l ) \u00c9tude du code \u00c9tudions, gr\u00e2ce \u00e0 PythonTutor, le d\u00e9tail de cette ex\u00e9cution. Cliquez sur Next et observez bien l'\u00e9volution de la variable k . avec une liste for a in [ 1 , 2 , 3 , 4 ]: b = 2 * a print ( \"le double de\" , a , \"est\" , b ) \u00c9tude du code \u00c9tudions, gr\u00e2ce \u00e0 PythonTutor, le d\u00e9tail de cette ex\u00e9cution. Cliquez sur Next et observez bien l'\u00e9volution de la variable a . sans appel \u00e0 la variable de boucle for a in [ 1 , 2 , 3 , 4 , 5 , 6 ]: print ( \"miaou\" ) \u00c9tude du code \u00c9tudions, gr\u00e2ce \u00e0 PythonTutor, le d\u00e9tail de cette ex\u00e9cution. Cliquez sur Next et observez bien l'\u00e9volution de la variable a . avec un range for k in range ( 10 ): print ( \"We're up all night to get lucky\" ) \u00c9tude du code \u00c9tudions, gr\u00e2ce \u00e0 PythonTutor, le d\u00e9tail de cette ex\u00e9cution. Cliquez sur Next et observez bien l'\u00e9volution de la variable k . Syntaxe Il faut absolument un caract\u00e8re : \u00e0 la fin de la ligne du for ! Indentation C'est le d\u00e9calage par rapport \u00e0 la marge - qu'on appelle indentation - qui d\u00e9termine quelles sont les instructions \u00e0 r\u00e9p\u00e9ter ! Exemples : attention \u00e0 l'indentation Tester les diff\u00e9rents codes suivants dans votre IDE ou dans la console ci-dessous: Code 1 for k in [ \"toto\" , \"tata\" , \"tutu\" ]: print ( \"Bonjour\" , end = \" \" ) print ( k ) Code 2 for k in [ \"toto\" , \"tata\" , \"tutu\" ]: print ( \"Bonjour\" , end = \" \" ) print ( k ) Code 3 for k in [ \"toto\" , \"tata\" , \"tutu\" ]: print ( \"Bonjour\" , end = \" \" ) print ( k ) Exercice 0 Compl\u00e9ter le code suivant pour satisfaire le parent de 2074 qui veur faire manger de la soupe \u00e0 son enfant. liste_noms = [ \"maman\" , \"papa\" , \"mamie Fran\u00e7oise\" , \"papy Jacques\" , \"m\u00e9m\u00e9 Paulette\" , \"tata Jacqueline\" , \"tonton Michel\" , \"le cousin Maurice\" , \"la cousine Gertrude\" , \"M\u00e9dor\" ] for 4. \u00c0 propos du range \u2693\ufe0e Il arrive tr\u00e8s fr\u00e9quemment que la variable soit tout simplement un entier, qui doit parcourir un ensemble de nombres entiers cons\u00e9cutifs. Par exemple, imaginons que votre professur.e d'EPS, \u00e0 court d'id\u00e9es d'activit\u00e9s \u00e0 cause des conditions sanitaires, d\u00e9cide de vous faire faire 20 tours de stade et vous demande d'annoncer \u00e0 chaque passagesur la ligne de d\u00e9part \u00e0 quel tour vous en \u00eates... Vous allez donc annoncer successivement \u00abTour 1!\u00bb, \u00abTour 2!\u00bb, \u00abTour 3!\u00bb, etc. jusqu'\u00e0 \u00abTour 20!\u00bb. Pour repr\u00e9senter cette situation, on peut donc imaginer un code ressemblant \u00e0: for k in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 ]: print ( \"Tour\" , k ) Mais la liste est tr\u00e8s p\u00e9nible \u00e0 \u00e9crire. Heureusement, comme vous avez d\u00fb le comprendre dans le dernier exemple du 3. , l'objet de type range permet de g\u00e9n\u00e9rer ce genre d'ensemble de nombres entiers cons\u00e9cutifs. G\u00e9n\u00e9rer une plage de nombres entiers L'objet range(start, stop, step) : il renvoie une s\u00e9quence de nombres entiers en partant de start ( inclus ) jusqu'\u00e0 stop ( exclus ), en incr\u00e9mentant de step ; start est facultatif et vaut 0 par d\u00e9faut; step est facultatif et vaut 1 par d\u00e9faut. Mais si on veut pr\u00e9ciser step , alors il faut donner aussi start , m\u00eame si sa valeur est 0. Attention Un objet range n'est pas de type list . Mais on peut le convertir en liste avec la fonction list . >>> range ( 10 ) range ( 0 , 10 ) >>> list ( range ( 10 )) [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] >>> Question \u00c9nonc\u00e9 Comment g\u00e9n\u00e9rer les nombres entiers de 1 \u00e0 20 (comme dans l'exemple des tours de terrain) avec un range ? >>> Indication Il ne faut pas commencer \u00e0 0... et le stop n'est pas inclus dans la s\u00e9quence ! Solution Il faut utiliser range(1, 21) . 5. La double boucle imbriqu\u00e9e \u2693\ufe0e Il est tr\u00e8s souvent utile d'imbriquer une boucle dans une autre, notamment lors du parcours de tous les pixels d'une image (voir les exercices graphiques sous Processing). Prenons pour l'instant un exemple num\u00e9rique : Comment \u00e9crire tous les produits de deux nombres compris entre 1 et 10? Il faut pour cela que le premier facteur parcourre range(1, 11) mais \u00e9galement le deuxi\u00e8me facteur! On obtient donc le code suivant: 1 2 3 for x in range ( 1 , 11 ): for y in range ( 1 , 11 ): print ( x * y ) \u00c0 vous d'essayer \u00c9nonc\u00e9 Comment obtenir l'affichage suivant? Papa dit : \u00ab et une cuill\u00e8re pour Riri ! \u00bb Papa dit : \u00ab et une cuill\u00e8re pour Fifi ! \u00bb Papa dit : \u00ab et une cuill\u00e8re pour Loulou ! \u00bb Maman dit : \u00ab et une cuill\u00e8re pour Riri ! \u00bb Maman dit : \u00ab et une cuill\u00e8re pour Fifi ! \u00bb Maman dit : \u00ab et une cuill\u00e8re pour Loulou ! \u00bb Mamie dit : \u00ab et une cuill\u00e8re pour Riri ! \u00bb Mamie dit : \u00ab et une cuill\u00e8re pour Fifi ! \u00bb Mamie dit : \u00ab et une cuill\u00e8re pour Loulou ! \u00bb Solution 1 2 3 for parent in [ \"Papa\" , \"Maman\" , \"Mamie\" ]: for enfant in [ \"Riri\" , \"Fifi\" , \"Loulou\" ]: print ( parent , \"dit : \u00ab et une cuill\u00e8re pour \" , enfant , \"! \u00bb) 6. Pour conclure \u2693\ufe0e \u00c0 retenir La boucle for s'utilise lorsqu'on conna\u00eet \u00e0 l'avance le nombre de r\u00e9p\u00e9titions \u00e0 effectuer: soit un nombre entier, soit un ensemble de valeurs contenus dans un iterable . On parle de boucle born\u00e9e . Les instructions r\u00e9p\u00e9t\u00e9es peuvent - mais ce n'est pas obligatoire - faire appel \u00e0 la variable de boucle, mais il ne faut pas que ces instructions la modifient. Ne pas oublier les : et l'indentation ! range(n) g\u00e9n\u00e8re une s\u00e9quence de n nombres entiers: on s'en servira d\u00e8s qu'on aura besoin de r\u00e9p\u00e9ter n fois des instructions. 7. Exercices \u2693\ufe0e S\u00e9rie 1: la base \u2693\ufe0e T\u00e9l\u00e9chargez le notebook d'exercices : T6.1_Exercices2.ipynb Quelques corrections Exercice 4 1 2 3 4 5 6 mystere = [ 111 , 107 , 44 , 32 , 98 , 105 , 101 , 110 , 32 , 106 , 111 , 117 , 233 ] mot_secret = \"\" for code in mystere : mot_secret = mot_secret + chr ( code ) print ( mot_secret ) Exercice 6 \u00c0 la ligne 3, on peut aussi \u00e9crire somme += k . 1 2 3 4 5 somme = 0 for k in range ( 1 , 1001 ): somme = somme + k print ( somme ) Exercice 8 La ligne 4 est \u00e9quivalente \u00e0 somme = somme + n . La fonction len donne le nombre d'\u00e9l\u00e9ments d'un iterable. 1 2 3 4 5 6 7 nombres = [ 15 , 8 , 12 , 19 , 10 , 17 ] somme = 0 for n in nombres : somme += n moyenne = somme / len ( nombres ) print ( moyenne ) S\u00e9rie 2: \u00e0 rendre \u2693\ufe0e \u00c0 faire sur Capytale : 30de-55310 Exercice 1 \u00c9nonc\u00e9 Proposer un code qui \u00e9crit la table de multiplication de 7. La sortie doit ressembler \u00e0: 7 * 1 = 7 7 * 2 = 14 ... 7 * 10 = 70 Correction Exercice 2 \u00c9nonc\u00e9 Sur un jeu d'\u00e9checs, les cases sont rep\u00e9r\u00e9es par une lettre (de A jusqu'\u00e0 H) et par un chiffre (de 1 jusqu'\u00e0 8). Les cases sont donc A1, A2, A3, ..., H7, H8. Proposer un code qui \u00e9crit toutes les cases possibles. Indication Pour convertir un entier en cha\u00eene de caract\u00e8res, on utilise la fonction str : >>> k = 3 >>> k 3 >>> str ( k ) '3' Correction S\u00e9rie 3: avec Processing \u2693\ufe0e Consulter d'abord la page sur Processing. Dans tous les exercices, votre code doit contenir au moins une boucle for . Exercice 1 \u00c9nonc\u00e9 L'objectif est d'obtenir un d\u00e9grad\u00e9 de gris: Pour rappel, un niveau de gris est un couleur RGB dont les trois composantes (entre 0 et 255) rouge, verte et bleue sont identiques. On prendra un canevas de 256x100 pixels. Solution Exercice 2 \u00c9nonc\u00e9 L'objectif est d'obtenir dix lignes al\u00e9atoires, de couleur al\u00e9atoire et d'\u00e9paisseur 10, sur un canevas de 300x300 pixels. La fonction random(a, b) permet d'obtenir un entier pseudo-al\u00e9atoire entre a et b . Solution Exercice 3 \u00c9nonc\u00e9 \u00c9crire un programme qui trace un quadrillage (espacement de 20 pixels) sur un canevas de 300x300 pixels. Solution Exercice 4 \u00c9nonc\u00e9 \u00c9crire un programme qui dessine une ligne de 20 carr\u00e9s de taille 50x50, dont la couleur sera al\u00e9atoire. Solution Exercice 5 \u00c9nonc\u00e9 Animer le programme de l'exercice pr\u00e9c\u00e9dent en d\u00e9finissant les fonctions setup et draw . Vous pouvez ralentir l'animation en untilisant la fonction frameRate dans la fonction setup . Par exemple, pour 15 images par seconde: def setup (): frameRate ( 15 ) Solution Exercice 6 \u00c9nonc\u00e9 Reprendre l'exercice 4, mais cette fois avec un carr\u00e9 de carr\u00e9s... (penser \u00e0 r\u00e9duire la taille de moiti\u00e9). Solution Exercice 7 \u00c9nonc\u00e9 Reproduire la figure suivante sur un canevas de 256x256 pixels. Indications la composante bleue est toujours 0; faire varier les composantes rouge et verte; pas d'animation Solution un objet de type list est un type construit que nous \u00e9tudierons au th\u00e8me 2, qui s'\u00e9crit entre crochets, ses \u00e9l\u00e9ments \u00e9tant s\u00e9par\u00e9s par une virgule (comme dans cet exemple). On peut donc parcourir ses \u00e9l\u00e9ments. \u21a9","title":"6.1.2 La boucle `for`"},{"location":"T06_Python/T6.1_Python/T6.1_2_For/#612-la-boucle-for","text":"Un ordinateur est fait pour effectuer des calculs longs et r\u00e9p\u00e9titifs .","title":"6.1.2 La boucle for"},{"location":"T06_Python/T6.1_Python/T6.1_2_For/#1-le-principe","text":"Imaginons - nous sommes en 2074 - une maman (ou un papa) qui souhaite faire manger \u00e0 son enfant les 10 derni\u00e8res cuill\u00e8res de soupe... en programmant son robot domestique pour qu'il annonce ces phrases \u00e0 sa place. On pourrait imaginer un code qui ressemble \u00e0 \u00e7a: print ( \"Une cuill\u00e8re pour maman\" ) print ( \"Une cuill\u00e8re pour papa\" ) print ( \"Une cuill\u00e8re pour mamie Fran\u00e7oise\" ) print ( \"Une cuill\u00e8re pour papy Jacques\" ) print ( \"Une cuill\u00e8re pour m\u00e9m\u00e9 Paulette\" ) print ( \"Une cuill\u00e8re pour tata Jacqueline\" ) print ( \"Une cuill\u00e8re pour tonton Michel\" ) print ( \"Une cuill\u00e8re pour le cousin Maurice\" ) print ( \"Une cuill\u00e8re pour la cousine Gertrude\" ) print ( \"Une cuill\u00e8re pour M\u00e9dor\" ) C'est tr\u00e8s r\u00e9p\u00e9titif. Et heureusement qu'il n'y a que 10 cuill\u00e8res... D'autant que chaque instruction est quasiment identique, seul le nom du membre de la famille change. En fran\u00e7ais, on serait tent\u00e9 de r\u00e9sumer en \u00abannonce une cuill\u00e8re pour chacun des 10 membres de la famille\u00bb Heureusement, dans tous les langages de programmation, il existe une instruction qui permet de r\u00e9p\u00e9ter une instruction (ou plusieurs instructions) pour chaque \u00e9l\u00e9ment d'un ensemble de valeurs donn\u00e9 : la boucle for . Vocabulaire En programmation, on parle de boucle pour toute instruction qui permet de r\u00e9p\u00e9ter des instructions. On utilise plut\u00f4t le verbe it\u00e9rer et on parle d' it\u00e9rations .","title":"1. Le principe"},{"location":"T06_Python/T6.1_Python/T6.1_2_For/#2-les-ensembles-de-valeurs-enumerables-iterables","text":"En math\u00e9matiques, on dit qu'un ensemble est d\u00e9nombrable lorsqu'on peut associer \u00e0 chaque \u00e9l\u00e9ment de l'ensemble un nombre (traditionnellement 1, 2, 3...) les fraises Tagada d'un paquet sont d\u00e9nombrables. les voitures qui roulent sur l'autoroute sont d\u00e9nombrables. l'eau qui coule d'un robinet n'est pas d\u00e9nombrable. En informatique, il existe un concept similaire qui va d\u00e9signer les objets que l'on peut \u00e9num\u00e9rer , c'est-\u00e0-dire les d\u00e9composer en une succession ordonn\u00e9e d'\u00e9l\u00e9ments. On les appelle les \u00e9num\u00e9rables ou les it\u00e9rables (Python utilise le mot anglais iterable ). la variable NSI (qui est de type string ) est \u00e9num\u00e9rable : on peut la d\u00e9composer en N , S , I . la variable [4, 3, 17] (qui est de type list 1 ) est \u00e9num\u00e9rable : on peut la d\u00e9composer en 4 , 3 , 17 . la variable 5 (qui est de type int ) n'est PAS \u00e9num\u00e9rable : on ne peut pas la d\u00e9composer.","title":"2. Les ensembles de valeurs \u00e9num\u00e9rables / it\u00e9rables"},{"location":"T06_Python/T6.1_Python/T6.1_2_For/#3-la-syntaxe","text":"La boucle for Pour mettre en place cette boucle, on a besoin d'identifier: les instructions \u00e0 r\u00e9p\u00e9ter; pour quelles valeurs diff\u00e9rentes on doit les r\u00e9p\u00e9ter: on a donc besoin d'une variable et d'un iterable que cette variable va parcourir; identifier dans les instructions ce qui d\u00e9pend de cette variable de boucle. Syntaxe g\u00e9n\u00e9rale: for var in iterable : * instructions \u00e0 r\u00e9p\u00e9ter * o\u00f9 var est un nom de variable (non pr\u00e9c\u00e9demment d\u00e9clar\u00e9e dans le programme), iterable un objet ... it\u00e9rable. On dit que var parcourt l'ensemble iterable . Exemples essentiels \u00e0 tester avec une cha\u00eene de caract\u00e8res for l in \"INRIA\" : print ( l ) \u00c9tude du code \u00c9tudions, gr\u00e2ce \u00e0 PythonTutor, le d\u00e9tail de cette ex\u00e9cution. Cliquez sur Next et observez bien l'\u00e9volution de la variable k . avec une liste for a in [ 1 , 2 , 3 , 4 ]: b = 2 * a print ( \"le double de\" , a , \"est\" , b ) \u00c9tude du code \u00c9tudions, gr\u00e2ce \u00e0 PythonTutor, le d\u00e9tail de cette ex\u00e9cution. Cliquez sur Next et observez bien l'\u00e9volution de la variable a . sans appel \u00e0 la variable de boucle for a in [ 1 , 2 , 3 , 4 , 5 , 6 ]: print ( \"miaou\" ) \u00c9tude du code \u00c9tudions, gr\u00e2ce \u00e0 PythonTutor, le d\u00e9tail de cette ex\u00e9cution. Cliquez sur Next et observez bien l'\u00e9volution de la variable a . avec un range for k in range ( 10 ): print ( \"We're up all night to get lucky\" ) \u00c9tude du code \u00c9tudions, gr\u00e2ce \u00e0 PythonTutor, le d\u00e9tail de cette ex\u00e9cution. Cliquez sur Next et observez bien l'\u00e9volution de la variable k . Syntaxe Il faut absolument un caract\u00e8re : \u00e0 la fin de la ligne du for ! Indentation C'est le d\u00e9calage par rapport \u00e0 la marge - qu'on appelle indentation - qui d\u00e9termine quelles sont les instructions \u00e0 r\u00e9p\u00e9ter ! Exemples : attention \u00e0 l'indentation Tester les diff\u00e9rents codes suivants dans votre IDE ou dans la console ci-dessous: Code 1 for k in [ \"toto\" , \"tata\" , \"tutu\" ]: print ( \"Bonjour\" , end = \" \" ) print ( k ) Code 2 for k in [ \"toto\" , \"tata\" , \"tutu\" ]: print ( \"Bonjour\" , end = \" \" ) print ( k ) Code 3 for k in [ \"toto\" , \"tata\" , \"tutu\" ]: print ( \"Bonjour\" , end = \" \" ) print ( k ) Exercice 0 Compl\u00e9ter le code suivant pour satisfaire le parent de 2074 qui veur faire manger de la soupe \u00e0 son enfant. liste_noms = [ \"maman\" , \"papa\" , \"mamie Fran\u00e7oise\" , \"papy Jacques\" , \"m\u00e9m\u00e9 Paulette\" , \"tata Jacqueline\" , \"tonton Michel\" , \"le cousin Maurice\" , \"la cousine Gertrude\" , \"M\u00e9dor\" ] for","title":"3. La syntaxe"},{"location":"T06_Python/T6.1_Python/T6.1_2_For/#4-a-propos-du-range","text":"Il arrive tr\u00e8s fr\u00e9quemment que la variable soit tout simplement un entier, qui doit parcourir un ensemble de nombres entiers cons\u00e9cutifs. Par exemple, imaginons que votre professur.e d'EPS, \u00e0 court d'id\u00e9es d'activit\u00e9s \u00e0 cause des conditions sanitaires, d\u00e9cide de vous faire faire 20 tours de stade et vous demande d'annoncer \u00e0 chaque passagesur la ligne de d\u00e9part \u00e0 quel tour vous en \u00eates... Vous allez donc annoncer successivement \u00abTour 1!\u00bb, \u00abTour 2!\u00bb, \u00abTour 3!\u00bb, etc. jusqu'\u00e0 \u00abTour 20!\u00bb. Pour repr\u00e9senter cette situation, on peut donc imaginer un code ressemblant \u00e0: for k in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 ]: print ( \"Tour\" , k ) Mais la liste est tr\u00e8s p\u00e9nible \u00e0 \u00e9crire. Heureusement, comme vous avez d\u00fb le comprendre dans le dernier exemple du 3. , l'objet de type range permet de g\u00e9n\u00e9rer ce genre d'ensemble de nombres entiers cons\u00e9cutifs. G\u00e9n\u00e9rer une plage de nombres entiers L'objet range(start, stop, step) : il renvoie une s\u00e9quence de nombres entiers en partant de start ( inclus ) jusqu'\u00e0 stop ( exclus ), en incr\u00e9mentant de step ; start est facultatif et vaut 0 par d\u00e9faut; step est facultatif et vaut 1 par d\u00e9faut. Mais si on veut pr\u00e9ciser step , alors il faut donner aussi start , m\u00eame si sa valeur est 0. Attention Un objet range n'est pas de type list . Mais on peut le convertir en liste avec la fonction list . >>> range ( 10 ) range ( 0 , 10 ) >>> list ( range ( 10 )) [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] >>> Question \u00c9nonc\u00e9 Comment g\u00e9n\u00e9rer les nombres entiers de 1 \u00e0 20 (comme dans l'exemple des tours de terrain) avec un range ? >>> Indication Il ne faut pas commencer \u00e0 0... et le stop n'est pas inclus dans la s\u00e9quence ! Solution Il faut utiliser range(1, 21) .","title":"4. \u00c0 propos du range"},{"location":"T06_Python/T6.1_Python/T6.1_2_For/#5-la-double-boucle-imbriquee","text":"Il est tr\u00e8s souvent utile d'imbriquer une boucle dans une autre, notamment lors du parcours de tous les pixels d'une image (voir les exercices graphiques sous Processing). Prenons pour l'instant un exemple num\u00e9rique : Comment \u00e9crire tous les produits de deux nombres compris entre 1 et 10? Il faut pour cela que le premier facteur parcourre range(1, 11) mais \u00e9galement le deuxi\u00e8me facteur! On obtient donc le code suivant: 1 2 3 for x in range ( 1 , 11 ): for y in range ( 1 , 11 ): print ( x * y ) \u00c0 vous d'essayer \u00c9nonc\u00e9 Comment obtenir l'affichage suivant? Papa dit : \u00ab et une cuill\u00e8re pour Riri ! \u00bb Papa dit : \u00ab et une cuill\u00e8re pour Fifi ! \u00bb Papa dit : \u00ab et une cuill\u00e8re pour Loulou ! \u00bb Maman dit : \u00ab et une cuill\u00e8re pour Riri ! \u00bb Maman dit : \u00ab et une cuill\u00e8re pour Fifi ! \u00bb Maman dit : \u00ab et une cuill\u00e8re pour Loulou ! \u00bb Mamie dit : \u00ab et une cuill\u00e8re pour Riri ! \u00bb Mamie dit : \u00ab et une cuill\u00e8re pour Fifi ! \u00bb Mamie dit : \u00ab et une cuill\u00e8re pour Loulou ! \u00bb Solution 1 2 3 for parent in [ \"Papa\" , \"Maman\" , \"Mamie\" ]: for enfant in [ \"Riri\" , \"Fifi\" , \"Loulou\" ]: print ( parent , \"dit : \u00ab et une cuill\u00e8re pour \" , enfant , \"! \u00bb)","title":"5. La double boucle imbriqu\u00e9e"},{"location":"T06_Python/T6.1_Python/T6.1_2_For/#6-pour-conclure","text":"\u00c0 retenir La boucle for s'utilise lorsqu'on conna\u00eet \u00e0 l'avance le nombre de r\u00e9p\u00e9titions \u00e0 effectuer: soit un nombre entier, soit un ensemble de valeurs contenus dans un iterable . On parle de boucle born\u00e9e . Les instructions r\u00e9p\u00e9t\u00e9es peuvent - mais ce n'est pas obligatoire - faire appel \u00e0 la variable de boucle, mais il ne faut pas que ces instructions la modifient. Ne pas oublier les : et l'indentation ! range(n) g\u00e9n\u00e8re une s\u00e9quence de n nombres entiers: on s'en servira d\u00e8s qu'on aura besoin de r\u00e9p\u00e9ter n fois des instructions.","title":"6. Pour conclure"},{"location":"T06_Python/T6.1_Python/T6.1_2_For/#7-exercices","text":"","title":"7. Exercices"},{"location":"T06_Python/T6.1_Python/T6.1_2_For/#serie-1-la-base","text":"T\u00e9l\u00e9chargez le notebook d'exercices : T6.1_Exercices2.ipynb Quelques corrections Exercice 4 1 2 3 4 5 6 mystere = [ 111 , 107 , 44 , 32 , 98 , 105 , 101 , 110 , 32 , 106 , 111 , 117 , 233 ] mot_secret = \"\" for code in mystere : mot_secret = mot_secret + chr ( code ) print ( mot_secret ) Exercice 6 \u00c0 la ligne 3, on peut aussi \u00e9crire somme += k . 1 2 3 4 5 somme = 0 for k in range ( 1 , 1001 ): somme = somme + k print ( somme ) Exercice 8 La ligne 4 est \u00e9quivalente \u00e0 somme = somme + n . La fonction len donne le nombre d'\u00e9l\u00e9ments d'un iterable. 1 2 3 4 5 6 7 nombres = [ 15 , 8 , 12 , 19 , 10 , 17 ] somme = 0 for n in nombres : somme += n moyenne = somme / len ( nombres ) print ( moyenne )","title":"S\u00e9rie 1: la base"},{"location":"T06_Python/T6.1_Python/T6.1_2_For/#serie-2-a-rendre","text":"\u00c0 faire sur Capytale : 30de-55310 Exercice 1 \u00c9nonc\u00e9 Proposer un code qui \u00e9crit la table de multiplication de 7. La sortie doit ressembler \u00e0: 7 * 1 = 7 7 * 2 = 14 ... 7 * 10 = 70 Correction Exercice 2 \u00c9nonc\u00e9 Sur un jeu d'\u00e9checs, les cases sont rep\u00e9r\u00e9es par une lettre (de A jusqu'\u00e0 H) et par un chiffre (de 1 jusqu'\u00e0 8). Les cases sont donc A1, A2, A3, ..., H7, H8. Proposer un code qui \u00e9crit toutes les cases possibles. Indication Pour convertir un entier en cha\u00eene de caract\u00e8res, on utilise la fonction str : >>> k = 3 >>> k 3 >>> str ( k ) '3' Correction","title":"S\u00e9rie 2: \u00e0 rendre"},{"location":"T06_Python/T6.1_Python/T6.1_2_For/#serie-3-avec-processing","text":"Consulter d'abord la page sur Processing. Dans tous les exercices, votre code doit contenir au moins une boucle for . Exercice 1 \u00c9nonc\u00e9 L'objectif est d'obtenir un d\u00e9grad\u00e9 de gris: Pour rappel, un niveau de gris est un couleur RGB dont les trois composantes (entre 0 et 255) rouge, verte et bleue sont identiques. On prendra un canevas de 256x100 pixels. Solution Exercice 2 \u00c9nonc\u00e9 L'objectif est d'obtenir dix lignes al\u00e9atoires, de couleur al\u00e9atoire et d'\u00e9paisseur 10, sur un canevas de 300x300 pixels. La fonction random(a, b) permet d'obtenir un entier pseudo-al\u00e9atoire entre a et b . Solution Exercice 3 \u00c9nonc\u00e9 \u00c9crire un programme qui trace un quadrillage (espacement de 20 pixels) sur un canevas de 300x300 pixels. Solution Exercice 4 \u00c9nonc\u00e9 \u00c9crire un programme qui dessine une ligne de 20 carr\u00e9s de taille 50x50, dont la couleur sera al\u00e9atoire. Solution Exercice 5 \u00c9nonc\u00e9 Animer le programme de l'exercice pr\u00e9c\u00e9dent en d\u00e9finissant les fonctions setup et draw . Vous pouvez ralentir l'animation en untilisant la fonction frameRate dans la fonction setup . Par exemple, pour 15 images par seconde: def setup (): frameRate ( 15 ) Solution Exercice 6 \u00c9nonc\u00e9 Reprendre l'exercice 4, mais cette fois avec un carr\u00e9 de carr\u00e9s... (penser \u00e0 r\u00e9duire la taille de moiti\u00e9). Solution Exercice 7 \u00c9nonc\u00e9 Reproduire la figure suivante sur un canevas de 256x256 pixels. Indications la composante bleue est toujours 0; faire varier les composantes rouge et verte; pas d'animation Solution un objet de type list est un type construit que nous \u00e9tudierons au th\u00e8me 2, qui s'\u00e9crit entre crochets, ses \u00e9l\u00e9ments \u00e9tant s\u00e9par\u00e9s par une virgule (comme dans cet exemple). On peut donc parcourir ses \u00e9l\u00e9ments. \u21a9","title":"S\u00e9rie 3: avec Processing"},{"location":"T06_Python/T6.1_Python/T6.1_3_While/","text":"6.1.3 La boucle while \u2693\ufe0e La boucle for s'utilise lorsqu'on conna\u00eet \u00e0 l'avance le nombre de r\u00e9p\u00e9titions \u00e0 effectuer: soit un nombre entier, soit un ensemble de valeurs contenus dans un iterable dont le nombre de valeurs est fixe. On parle de boucle born\u00e9e . Mais il arrive fr\u00e9quemment qu'on doive r\u00e9p\u00e9ter des instructions un certain nombre de fois, qui n'est pas connu \u00e0 l'avance. On a donc besoin d'une boucle non born\u00e9e qui s'\u00e9x\u00e9cutera tant qu'une condition est r\u00e9alis\u00e9e et qui stoppera d\u00e8s que cette condition ne le sera plus. En Python, cette instruction s'appelle while (\u00abtant que\u00bb pour les non anglophones).","title":"6.1.3 La boucle `while`"},{"location":"T06_Python/T6.1_Python/T6.1_3_While/#613-la-boucle-while","text":"La boucle for s'utilise lorsqu'on conna\u00eet \u00e0 l'avance le nombre de r\u00e9p\u00e9titions \u00e0 effectuer: soit un nombre entier, soit un ensemble de valeurs contenus dans un iterable dont le nombre de valeurs est fixe. On parle de boucle born\u00e9e . Mais il arrive fr\u00e9quemment qu'on doive r\u00e9p\u00e9ter des instructions un certain nombre de fois, qui n'est pas connu \u00e0 l'avance. On a donc besoin d'une boucle non born\u00e9e qui s'\u00e9x\u00e9cutera tant qu'une condition est r\u00e9alis\u00e9e et qui stoppera d\u00e8s que cette condition ne le sera plus. En Python, cette instruction s'appelle while (\u00abtant que\u00bb pour les non anglophones).","title":"6.1.3 La boucle while"},{"location":"T06_Python/T6.1_Python/T6.1_4_If/","text":"6.1.4 L'instruction conditionnelle if \u2693\ufe0e age = int ( input ( \"Quel \u00e2ge avez-vous?\" )) if age < 12 : print ( \"pas besoin de pass sanitaire\" ) else : print ( \"merci de pr\u00e9senter votre pass sanitaire\" )","title":"6.1.4 L'instruction conditionnelle `if`"},{"location":"T06_Python/T6.1_Python/T6.1_4_If/#614-linstruction-conditionnelle-if","text":"age = int ( input ( \"Quel \u00e2ge avez-vous?\" )) if age < 12 : print ( \"pas besoin de pass sanitaire\" ) else : print ( \"merci de pr\u00e9senter votre pass sanitaire\" )","title":"6.1.4 L'instruction conditionnelle if"},{"location":"T06_Python/T6.1_Python/T6.1_5_Fonctions/","text":"6.1.5 Les fonctions \u2693\ufe0e","title":"6.1.5 Les fonctions"},{"location":"T06_Python/T6.1_Python/T6.1_5_Fonctions/#615-les-fonctions","text":"","title":"6.1.5 Les fonctions"},{"location":"T06_Python/T6.1_Python/p5/T6.1_inf_p5/","text":"6.1.\u221e Le module p5 \u2693\ufe0e 1. C'est quoi, le module p5 ? \u2693\ufe0e En Python, un module est un fichier constitu\u00e9 de code Python, qui contient en g\u00e9n\u00e9ral des fonctions d\u00e9di\u00e9es \u00e0 traiter un th\u00e8me bien pr\u00e9cis. Il en existe \u00e9norm\u00e9ment, ce qui participe \u00e0 la popularit\u00e9 de ce langage. Par exemple, vous avez certainement utilis\u00e9 en seconde 1 les modules math (qui contient en autres les fonctions math\u00e9matiques usuelles) et random (qui contient des fonctions de g\u00e9n\u00e9ration de nombres pseudo-al\u00e9atoires). Nous utiliserons bien d'autres modules au cours de l'ann\u00e9e, pour traiter des images, des donn\u00e9es csv, faire des requ\u00eates web, etc. Nous \u00e9tudierons ces modules dans un chapitre \u00e0 part un peu plus tard dans l'ann\u00e9e. Le module p5 de Python est un portage du langage Processing , qui est un outil de cr\u00e9ation multim\u00e9dia utilisant le code informatique. Simple de prise en main, il a \u00e9t\u00e9 cr\u00e9\u00e9 par des artistes pour des artistes. Nous l'utiliserons pour ajouter du graphisme \u00e0 nos cr\u00e9ations... Squelette de programme avec p5 (obligatoire!) 1 2 3 4 5 6 7 8 9 10 from p5 import * def setup (): # corps de la fonction \u00e0 compl\u00e9ter def draw (): # corps de la fonction \u00e0 compl\u00e9ter run () Ligne 1 On importe le module, c'est-\u00e0-dire qu'on charge en m\u00e9moire tout le contenu du fichier. la fonction setup Elle contient le param\u00e9trage initial du programme (taille de la fen\u00eatre, couleur de fond, etc). la fonction draw Le contenu de cette fonction est continuellement ex\u00e9cut\u00e9, \u00e0 raison de 60 images par seconde par d\u00e9faut. Sauf si la fonction no_loop est appel\u00e9e dans setup . la fonction run Elle lance la fen\u00eatre d'ex\u00e9cution du programme. 2. Les bases \u2693\ufe0e 2.1 Rep\u00e8re \u2693\ufe0e \u00c0 l'ex\u00e9cution de la fonction run , une fen\u00eatre s'affiche avec une zone de dessin qu'on appelle g\u00e9n\u00e9ralement canevas (canvas in english). Sa taille se d\u00e9finit \u00e0 l'aide de la fonction size \u00e0 l'int\u00e9rieur de la fonction setup . Par exemple, pour cr\u00e9er une zone de dessin de 300 pixels sur 200 pixels, on utilisera: size ( 300 , 200 ) Chaque pixel de cette zone est rep\u00e9r\u00e9e par des coordonn\u00e9es dans le rep\u00e8re suivant, dont l'origine se situe en haut \u00e0 gauche et l'axe des ordonn\u00e9es est orient\u00e9 vers le bas . 2.2 Trac\u00e9s \u2693\ufe0e Trac\u00e9s de base point : permet de dessiner un point (pixel). En param\u00e8tre, les coordonn\u00e9es du point. line : permet de tracer une ligne entre deux points. En param\u00e8tres, les coordonn\u00e9es des deux points. rect : permet de tracer un rectangle. En param\u00e8tres, les coordonn\u00e9es du sommet haut-gauche, puis la largeur et la hauteur du rectangle. ellipse : permet de tracer une ellipse. En param\u00e8tres, les coordonn\u00e9es du centre, puis la largeur et la hauteur (mettre la m\u00eame valeur pour un cercle). Exemples Copier-coller le code suivant et faire varier les param\u00e8tres pour bien les comprendre. from p5 import * def setup (): size ( 200 , 200 ) no_loop () def draw (): rect (( 90 , 50 ), 20 , 100 ) ellipse (( 100 , 70 ), 60 , 60 ) ellipse (( 81 , 70 ), 16 , 32 ) point ( 81 , 70 ) ellipse (( 119 , 70 ), 16 , 32 ) point ( 119 , 70 ) line (( 90 , 150 ), ( 80 , 160 )) line (( 110 , 150 ), ( 120 , 160 )) run () 2.3 Couleurs \u2693\ufe0e Pinceau background : permet de d\u00e9finir la couleur du fond de la zone de dessin. En param\u00e8tres, les trois composantes RGB de la couleur. stroke : permet de d\u00e9finir la couleur du pinceau (noir par d\u00e9faut) pour le contour de la forme. En param\u00e8tres, les trois composantes RGB de la couleur. no_stroke() : permet de dessiner une forme sans coutour (pas de param\u00e8tre). stroke_weight : permet de d\u00e9finir la largeur du pinceau. En param\u00e8tre, le nombre de pixels. fill : permet de d\u00e9finir la couleur de remplissage de la forme. En param\u00e8tres, les trois composantes RGB de la couleur. Exemples Copier-coller le code suivant et faire varier les param\u00e8tres pour bien les comprendre. from p5 import * def setup (): size ( 200 , 200 ) no_loop () def draw (): background ( 12 , 12 , 12 ) fill ( 255 , 0 , 0 ) rect (( 90 , 50 ), 20 , 100 ) no_stroke () fill ( 244 , 164 , 96 ) ellipse (( 100 , 70 ), 60 , 60 ) stroke ( 1 ) fill ( 255 , 255 , 255 ) ellipse (( 81 , 70 ), 16 , 32 ) point ( 81 , 70 ) ellipse (( 119 , 70 ), 16 , 32 ) stroke_weight ( 5 ) point ( 119 , 70 ) stroke_weight ( 2 ) line (( 90 , 150 ), ( 80 , 160 )) line (( 110 , 150 ), ( 120 , 160 )) run () 3. Exercice \u2693\ufe0e Exercice 1 Dans un canevas de 300 x 200 pixels, dessiner successivement les drapeaux fran\u00e7ais, japonais puis tch\u00e8que. Consulter la documentation pour des triangles ou polygones. bon ok, \u00e7a d\u00e9pend de quel prof vous avez eu l'an dernier... \u21a9","title":"6.1.\u221e Le module p5"},{"location":"T06_Python/T6.1_Python/p5/T6.1_inf_p5/#61-le-module-p5","text":"","title":"6.1.\u221e Le module p5"},{"location":"T06_Python/T6.1_Python/p5/T6.1_inf_p5/#1-cest-quoi-le-module-p5","text":"En Python, un module est un fichier constitu\u00e9 de code Python, qui contient en g\u00e9n\u00e9ral des fonctions d\u00e9di\u00e9es \u00e0 traiter un th\u00e8me bien pr\u00e9cis. Il en existe \u00e9norm\u00e9ment, ce qui participe \u00e0 la popularit\u00e9 de ce langage. Par exemple, vous avez certainement utilis\u00e9 en seconde 1 les modules math (qui contient en autres les fonctions math\u00e9matiques usuelles) et random (qui contient des fonctions de g\u00e9n\u00e9ration de nombres pseudo-al\u00e9atoires). Nous utiliserons bien d'autres modules au cours de l'ann\u00e9e, pour traiter des images, des donn\u00e9es csv, faire des requ\u00eates web, etc. Nous \u00e9tudierons ces modules dans un chapitre \u00e0 part un peu plus tard dans l'ann\u00e9e. Le module p5 de Python est un portage du langage Processing , qui est un outil de cr\u00e9ation multim\u00e9dia utilisant le code informatique. Simple de prise en main, il a \u00e9t\u00e9 cr\u00e9\u00e9 par des artistes pour des artistes. Nous l'utiliserons pour ajouter du graphisme \u00e0 nos cr\u00e9ations... Squelette de programme avec p5 (obligatoire!) 1 2 3 4 5 6 7 8 9 10 from p5 import * def setup (): # corps de la fonction \u00e0 compl\u00e9ter def draw (): # corps de la fonction \u00e0 compl\u00e9ter run () Ligne 1 On importe le module, c'est-\u00e0-dire qu'on charge en m\u00e9moire tout le contenu du fichier. la fonction setup Elle contient le param\u00e9trage initial du programme (taille de la fen\u00eatre, couleur de fond, etc). la fonction draw Le contenu de cette fonction est continuellement ex\u00e9cut\u00e9, \u00e0 raison de 60 images par seconde par d\u00e9faut. Sauf si la fonction no_loop est appel\u00e9e dans setup . la fonction run Elle lance la fen\u00eatre d'ex\u00e9cution du programme.","title":"1. C'est quoi, le module p5 ?"},{"location":"T06_Python/T6.1_Python/p5/T6.1_inf_p5/#2-les-bases","text":"","title":"2. Les bases"},{"location":"T06_Python/T6.1_Python/p5/T6.1_inf_p5/#21-repere","text":"\u00c0 l'ex\u00e9cution de la fonction run , une fen\u00eatre s'affiche avec une zone de dessin qu'on appelle g\u00e9n\u00e9ralement canevas (canvas in english). Sa taille se d\u00e9finit \u00e0 l'aide de la fonction size \u00e0 l'int\u00e9rieur de la fonction setup . Par exemple, pour cr\u00e9er une zone de dessin de 300 pixels sur 200 pixels, on utilisera: size ( 300 , 200 ) Chaque pixel de cette zone est rep\u00e9r\u00e9e par des coordonn\u00e9es dans le rep\u00e8re suivant, dont l'origine se situe en haut \u00e0 gauche et l'axe des ordonn\u00e9es est orient\u00e9 vers le bas .","title":"2.1 Rep\u00e8re"},{"location":"T06_Python/T6.1_Python/p5/T6.1_inf_p5/#22-traces","text":"Trac\u00e9s de base point : permet de dessiner un point (pixel). En param\u00e8tre, les coordonn\u00e9es du point. line : permet de tracer une ligne entre deux points. En param\u00e8tres, les coordonn\u00e9es des deux points. rect : permet de tracer un rectangle. En param\u00e8tres, les coordonn\u00e9es du sommet haut-gauche, puis la largeur et la hauteur du rectangle. ellipse : permet de tracer une ellipse. En param\u00e8tres, les coordonn\u00e9es du centre, puis la largeur et la hauteur (mettre la m\u00eame valeur pour un cercle). Exemples Copier-coller le code suivant et faire varier les param\u00e8tres pour bien les comprendre. from p5 import * def setup (): size ( 200 , 200 ) no_loop () def draw (): rect (( 90 , 50 ), 20 , 100 ) ellipse (( 100 , 70 ), 60 , 60 ) ellipse (( 81 , 70 ), 16 , 32 ) point ( 81 , 70 ) ellipse (( 119 , 70 ), 16 , 32 ) point ( 119 , 70 ) line (( 90 , 150 ), ( 80 , 160 )) line (( 110 , 150 ), ( 120 , 160 )) run ()","title":"2.2 Trac\u00e9s"},{"location":"T06_Python/T6.1_Python/p5/T6.1_inf_p5/#23-couleurs","text":"Pinceau background : permet de d\u00e9finir la couleur du fond de la zone de dessin. En param\u00e8tres, les trois composantes RGB de la couleur. stroke : permet de d\u00e9finir la couleur du pinceau (noir par d\u00e9faut) pour le contour de la forme. En param\u00e8tres, les trois composantes RGB de la couleur. no_stroke() : permet de dessiner une forme sans coutour (pas de param\u00e8tre). stroke_weight : permet de d\u00e9finir la largeur du pinceau. En param\u00e8tre, le nombre de pixels. fill : permet de d\u00e9finir la couleur de remplissage de la forme. En param\u00e8tres, les trois composantes RGB de la couleur. Exemples Copier-coller le code suivant et faire varier les param\u00e8tres pour bien les comprendre. from p5 import * def setup (): size ( 200 , 200 ) no_loop () def draw (): background ( 12 , 12 , 12 ) fill ( 255 , 0 , 0 ) rect (( 90 , 50 ), 20 , 100 ) no_stroke () fill ( 244 , 164 , 96 ) ellipse (( 100 , 70 ), 60 , 60 ) stroke ( 1 ) fill ( 255 , 255 , 255 ) ellipse (( 81 , 70 ), 16 , 32 ) point ( 81 , 70 ) ellipse (( 119 , 70 ), 16 , 32 ) stroke_weight ( 5 ) point ( 119 , 70 ) stroke_weight ( 2 ) line (( 90 , 150 ), ( 80 , 160 )) line (( 110 , 150 ), ( 120 , 160 )) run ()","title":"2.3 Couleurs"},{"location":"T06_Python/T6.1_Python/p5/T6.1_inf_p5/#3-exercice","text":"Exercice 1 Dans un canevas de 300 x 200 pixels, dessiner successivement les drapeaux fran\u00e7ais, japonais puis tch\u00e8que. Consulter la documentation pour des triangles ou polygones. bon ok, \u00e7a d\u00e9pend de quel prof vous avez eu l'an dernier... \u21a9","title":"3. Exercice"},{"location":"T07_Algorithmes/accueil/","text":"Algorithmique \u2693\ufe0e Histoire de l'informatique Al Hwarizmi (~780-850) est un math\u00e9maticien persan membre de la Maison de la sagesse de Bagdad. Ses travaux d'alg\u00e8bre sur les m\u00e9thodes de r\u00e9solution des \u00e9quations ont donn\u00e9, par d\u00e9formation de son nom latinis\u00e9, au mot algorithme . Alan Turing (1912-1954) est une math\u00e9maticien britannique, connu pour avoir d\u00e9crypt\u00e9 la machine Enigma pendant la deuxi\u00e8me guerre mondiale. Ses travaux sur les liens entre algorithme et raisonnement math\u00e9matique l'ont conduit \u00e0 imaginer un proc\u00e9d\u00e9 de calcul universel, la machine de Turing , \u00e0 l'origine de la conception des ordinateurs. Tout comme les plus grands chefs con\u00e7oivent leurs recettes \u00e0 partir de recettes de base classiques, on retrouve dans les algorithmes les plus complexes des r\u00e9solutions de probl\u00e8mes simples et r\u00e9currents: parcourir une liste, trier...","title":"Algorithmique"},{"location":"T07_Algorithmes/accueil/#algorithmique","text":"Histoire de l'informatique Al Hwarizmi (~780-850) est un math\u00e9maticien persan membre de la Maison de la sagesse de Bagdad. Ses travaux d'alg\u00e8bre sur les m\u00e9thodes de r\u00e9solution des \u00e9quations ont donn\u00e9, par d\u00e9formation de son nom latinis\u00e9, au mot algorithme . Alan Turing (1912-1954) est une math\u00e9maticien britannique, connu pour avoir d\u00e9crypt\u00e9 la machine Enigma pendant la deuxi\u00e8me guerre mondiale. Ses travaux sur les liens entre algorithme et raisonnement math\u00e9matique l'ont conduit \u00e0 imaginer un proc\u00e9d\u00e9 de calcul universel, la machine de Turing , \u00e0 l'origine de la conception des ordinateurs. Tout comme les plus grands chefs con\u00e7oivent leurs recettes \u00e0 partir de recettes de base classiques, on retrouve dans les algorithmes les plus complexes des r\u00e9solutions de probl\u00e8mes simples et r\u00e9currents: parcourir une liste, trier...","title":"Algorithmique"},{"location":"T07_Algorithmes/T7.1_Parcours/T7.1_Parcours/","text":"7.1 Parcours de tableau \u2693\ufe0e","title":"7.1 Parcours de tableau"},{"location":"T07_Algorithmes/T7.1_Parcours/T7.1_Parcours/#71-parcours-de-tableau","text":"","title":"7.1 Parcours de tableau"},{"location":"T09_Projets/Projets/","text":"Projets \u2693\ufe0e","title":"Projets"},{"location":"T09_Projets/Projets/#projets","text":"","title":"Projets"},{"location":"T09_Projets/Perseverance/Perseverance/","text":"Le parachute de Perseverance \u2693\ufe0e Lors de sa descente vers la plan\u00e8te Mars le 18/02/2021 (voir la section Liens ), le rover Perseverance de la Nasa a frein\u00e9 sa chute gr\u00e2ce \u00e0 un parachute qui a intrigu\u00e9 quelques internautes du forum Reddit. Vid\u00e9o du d\u00e9ploiement du parachute Les zones blanches et rouges se d\u00e9composent comme ceci, sur 4 couronnes: Apr\u00e8s quelques essais infructueux, ils ont remarqu\u00e9 que les 80 \u00e9lements de chaque couronne pouvaient se d\u00e9composer en 8 groupes de 10 \u00e9l\u00e9ments , chacun d\u00e9butant par 3 \u00e9l\u00e9ments blancs . En voici les deux premiers groupes mis en relief: D\u00e9codez le message cach\u00e9! Le tout premier secteur doit correpondre \u00e0 la lettre D: \u00e0 vous de comprendre le codage utilis\u00e9... Le message secret s'obtiendra en tournant en spirale depuis ce secteur, dans le sens horaire, sur les trois premi\u00e8res couronnes. La derni\u00e8re couronne (la plus \u00e0 l'ext\u00e9rieur) est un peu particuli\u00e8re, mais n'en disons pas plus... Faites votre propre parachute: https://sjwarner.github.io/perseverance-parachute-generator/","title":"Le parachute de Perseverance"},{"location":"T09_Projets/Perseverance/Perseverance/#le-parachute-de-perseverance","text":"Lors de sa descente vers la plan\u00e8te Mars le 18/02/2021 (voir la section Liens ), le rover Perseverance de la Nasa a frein\u00e9 sa chute gr\u00e2ce \u00e0 un parachute qui a intrigu\u00e9 quelques internautes du forum Reddit. Vid\u00e9o du d\u00e9ploiement du parachute Les zones blanches et rouges se d\u00e9composent comme ceci, sur 4 couronnes: Apr\u00e8s quelques essais infructueux, ils ont remarqu\u00e9 que les 80 \u00e9lements de chaque couronne pouvaient se d\u00e9composer en 8 groupes de 10 \u00e9l\u00e9ments , chacun d\u00e9butant par 3 \u00e9l\u00e9ments blancs . En voici les deux premiers groupes mis en relief: D\u00e9codez le message cach\u00e9! Le tout premier secteur doit correpondre \u00e0 la lettre D: \u00e0 vous de comprendre le codage utilis\u00e9... Le message secret s'obtiendra en tournant en spirale depuis ce secteur, dans le sens horaire, sur les trois premi\u00e8res couronnes. La derni\u00e8re couronne (la plus \u00e0 l'ext\u00e9rieur) est un peu particuli\u00e8re, mais n'en disons pas plus... Faites votre propre parachute: https://sjwarner.github.io/perseverance-parachute-generator/","title":"Le parachute de Perseverance"},{"location":"T10_Processing/Accueil_processing/","text":"Prise en main de Processing \u2693\ufe0e Processing est un outil de cr\u00e9ation multim\u00e9dia utilisant le code informatique. Simple de prise en main, il a \u00e9t\u00e9 cr\u00e9\u00e9 par des artistes pour des artistes. On peut utiliser le langage Python pour entrer les instructions. Nous l'utiliserons pour ajouter du graphisme \u00e0 nos cr\u00e9ations... Documentation Le site officiel (anglais) Un manuel d'utilisation (fran\u00e7ais)","title":"Prise en main de Processing"},{"location":"T10_Processing/Accueil_processing/#prise-en-main-de-processing","text":"Processing est un outil de cr\u00e9ation multim\u00e9dia utilisant le code informatique. Simple de prise en main, il a \u00e9t\u00e9 cr\u00e9\u00e9 par des artistes pour des artistes. On peut utiliser le langage Python pour entrer les instructions. Nous l'utiliserons pour ajouter du graphisme \u00e0 nos cr\u00e9ations... Documentation Le site officiel (anglais) Un manuel d'utilisation (fran\u00e7ais)","title":"Prise en main de Processing"},{"location":"T10_Processing/01_Bases/T10.1_Bases/","text":"Les bases de Processing \u2693\ufe0e Rep\u00e8re \u2693\ufe0e \u00c0 l'ex\u00e9cution de tout script Processing, une fen\u00eatre s'affiche avec une zone de dessin qu'on appelle g\u00e9n\u00e9ralement canevas (canvas in english). Sa taille se d\u00e9finit \u00e0 l'aide de la fonction size . Par exemple, pour cr\u00e9er un canevas de 300 pixels sur 200 pixels, on utilisera: size ( 300 , 200 ) Chaque pixel de cette zone est rep\u00e9r\u00e9e par des coordonn\u00e9es dans le rep\u00e8re suivant, dont l'origine se situe en haut \u00e0 gauche et l'axe des ordonn\u00e9es est orient\u00e9 vers le bas . Trac\u00e9s \u2693\ufe0e Trac\u00e9s de base point : permet de dessiner un point (pixel). En param\u00e8tre, les coordonn\u00e9es du point. line : permet de tracer une ligne entre deux points. En param\u00e8tres, les coordonn\u00e9es des deux points. rect : permet de tracer un rectangle. En param\u00e8tres, les coordonn\u00e9es du sommet haut-gauche, puis la largeur et la hauteur du rectangle. ellipse : permet de tracer une ellipse. En param\u00e8tres, les coordonn\u00e9es du centre, puis la largeur et la hauteur (mettre la m\u00eame valeur pour un cercle). Exemples Copier-coller le code suivant et faire varier les param\u00e8tres pour bien les comprendre. background ( 255 ) rect ( 90 , 50 , 20 , 100 ) fill ( 244 , 164 , 96 ) ellipse ( 100 , 70 , 60 , 60 ) fill ( 255 , 255 , 255 ) ellipse ( 81 , 70 , 16 , 32 ) point ( 81 , 70 ) ellipse ( 119 , 70 , 16 , 32 ) point ( 119 , 70 ) line ( 90 , 150 , 80 , 160 ) line ( 110 , 150 , 120 , 160 ) Couleurs \u2693\ufe0e Pinceau background : permet de d\u00e9finir la couleur du fond de la zone de dessin. En param\u00e8tres, les trois composantes RGB de la couleur. stroke : permet de d\u00e9finir la couleur du pinceau (noir par d\u00e9faut) pour le contour de la forme. En param\u00e8tres, les trois composantes RGB de la couleur. noStroke : permet de dessiner une forme sans coutour (pas de param\u00e8tre). strokeWeight : permet de d\u00e9finir la largeur du pinceau. En param\u00e8tre, le nombre de pixel. fill : permet de d\u00e9finir la couleur de remplissage de la forme. En param\u00e8tres, les trois composantes RGB de la couleur. Exemples Copier-coller le code suivant et faire varier les param\u00e8tres pour bien les comprendre. background ( 255 ) fill ( 255 , 0 , 0 ) rect ( 90 , 50 , 20 , 100 ) noStroke () fill ( 244 , 164 , 96 ) ellipse ( 100 , 70 , 60 , 60 ) stroke ( 1 ) fill ( 255 , 255 , 255 ) ellipse ( 81 , 70 , 16 , 32 ) point ( 81 , 70 ) ellipse ( 119 , 70 , 16 , 32 ) strokeWeight ( 5 ) point ( 119 , 70 ) strokeWeight ( 2 ) line ( 90 , 150 , 80 , 160 ) line ( 110 , 150 , 120 , 160 ) Exercice \u2693\ufe0e Exercice 1 Dans un canevas de 300 x 200 pixels, dessiner successivement les drapeaux fran\u00e7ais, japonais puis tch\u00e8que. Consulter la documentation pour les triangles ou polygones (Menu \"Help\", puis \"References\").","title":"Les bases de Processing"},{"location":"T10_Processing/01_Bases/T10.1_Bases/#les-bases-de-processing","text":"","title":"Les bases de Processing"},{"location":"T10_Processing/01_Bases/T10.1_Bases/#repere","text":"\u00c0 l'ex\u00e9cution de tout script Processing, une fen\u00eatre s'affiche avec une zone de dessin qu'on appelle g\u00e9n\u00e9ralement canevas (canvas in english). Sa taille se d\u00e9finit \u00e0 l'aide de la fonction size . Par exemple, pour cr\u00e9er un canevas de 300 pixels sur 200 pixels, on utilisera: size ( 300 , 200 ) Chaque pixel de cette zone est rep\u00e9r\u00e9e par des coordonn\u00e9es dans le rep\u00e8re suivant, dont l'origine se situe en haut \u00e0 gauche et l'axe des ordonn\u00e9es est orient\u00e9 vers le bas .","title":"Rep\u00e8re"},{"location":"T10_Processing/01_Bases/T10.1_Bases/#traces","text":"Trac\u00e9s de base point : permet de dessiner un point (pixel). En param\u00e8tre, les coordonn\u00e9es du point. line : permet de tracer une ligne entre deux points. En param\u00e8tres, les coordonn\u00e9es des deux points. rect : permet de tracer un rectangle. En param\u00e8tres, les coordonn\u00e9es du sommet haut-gauche, puis la largeur et la hauteur du rectangle. ellipse : permet de tracer une ellipse. En param\u00e8tres, les coordonn\u00e9es du centre, puis la largeur et la hauteur (mettre la m\u00eame valeur pour un cercle). Exemples Copier-coller le code suivant et faire varier les param\u00e8tres pour bien les comprendre. background ( 255 ) rect ( 90 , 50 , 20 , 100 ) fill ( 244 , 164 , 96 ) ellipse ( 100 , 70 , 60 , 60 ) fill ( 255 , 255 , 255 ) ellipse ( 81 , 70 , 16 , 32 ) point ( 81 , 70 ) ellipse ( 119 , 70 , 16 , 32 ) point ( 119 , 70 ) line ( 90 , 150 , 80 , 160 ) line ( 110 , 150 , 120 , 160 )","title":"Trac\u00e9s"},{"location":"T10_Processing/01_Bases/T10.1_Bases/#couleurs","text":"Pinceau background : permet de d\u00e9finir la couleur du fond de la zone de dessin. En param\u00e8tres, les trois composantes RGB de la couleur. stroke : permet de d\u00e9finir la couleur du pinceau (noir par d\u00e9faut) pour le contour de la forme. En param\u00e8tres, les trois composantes RGB de la couleur. noStroke : permet de dessiner une forme sans coutour (pas de param\u00e8tre). strokeWeight : permet de d\u00e9finir la largeur du pinceau. En param\u00e8tre, le nombre de pixel. fill : permet de d\u00e9finir la couleur de remplissage de la forme. En param\u00e8tres, les trois composantes RGB de la couleur. Exemples Copier-coller le code suivant et faire varier les param\u00e8tres pour bien les comprendre. background ( 255 ) fill ( 255 , 0 , 0 ) rect ( 90 , 50 , 20 , 100 ) noStroke () fill ( 244 , 164 , 96 ) ellipse ( 100 , 70 , 60 , 60 ) stroke ( 1 ) fill ( 255 , 255 , 255 ) ellipse ( 81 , 70 , 16 , 32 ) point ( 81 , 70 ) ellipse ( 119 , 70 , 16 , 32 ) strokeWeight ( 5 ) point ( 119 , 70 ) strokeWeight ( 2 ) line ( 90 , 150 , 80 , 160 ) line ( 110 , 150 , 120 , 160 )","title":"Couleurs"},{"location":"T10_Processing/01_Bases/T10.1_Bases/#exercice","text":"Exercice 1 Dans un canevas de 300 x 200 pixels, dessiner successivement les drapeaux fran\u00e7ais, japonais puis tch\u00e8que. Consulter la documentation pour les triangles ou polygones (Menu \"Help\", puis \"References\").","title":"Exercice"},{"location":"T10_Processing/02_Animations/T10.2_Animations/","text":"Animations \u2693\ufe0e Le principe Processing propose 2 fonctions pr\u00e9d\u00e9finies que le programmeur devra compl\u00e9ter : la fonction setup qui sera appel\u00e9e une seule fois d\u00e8s le d\u00e9but de l\u2019ex\u00e9cution du programme ; la fonction draw qui sera appel\u00e9e \u00e0 chaque image \u00e0 raison de 60 images par d\u00e9faut (on peut r\u00e9gler les FPS avec la fonction frameRate ). Ces deux fonctions ne prennent aucun param\u00e8tre et ne retournent aucune valeur. Exemple r = 2 dr = 2 def setup (): size ( 400 , 400 ) stroke ( 255 , 0 , 0 ) fill ( 0 ) # frameRate(20) def draw (): global r , dr background ( 255 ) ellipse ( 200 , 200 , 2 * r , 2 * r ) if r < 2 or r > 200 : dr = - dr r = r + dr Explication du code Les variables On d\u00e9finit deux variables r pour le rayon du disque et dr pour la quantit\u00e9 ajout\u00e9e \u00e0 ce rayon \u00e0 chaque image (frame). Avec Processing, il est imp\u00e9ratif de pr\u00e9ciser que ce sont des variables globales pour pouvoir les utiliser dans la fonction draw (ligne 9). La fonction setup On d\u00e9finit la taille de la zone de dessin, la couleur du contour (rouge) et du remplissage (noir). La fonction draw C'est ici qu'on d\u00e9crit ce qui doit se passer \u00e0 chaque image: on augmente le rayon r de la quantit\u00e9 dr , qu'on passe \u00e0 son oppos\u00e9 d\u00e8s que le rayon devient trop grand ou trop petit pour alterner augmentation et diminution. Exercice 2 \u00c9crire un programme permettant d\u2019avoir une balle rouge (cr\u00e9\u00e9e avec la fonction ellipse), de rayon constant cette fois, qui traverse la zone de dessin de gauche \u00e0 droite. Am\u00e9liorer le programme pour que la balle rebondisse sur les bords de la zone. Modifier le programme pour permettre \u00e0 la balle de se d\u00e9placer en diagonale. La position de d\u00e9part, la vitesse de d\u00e9part ainsi que la direction de d\u00e9part pourront \u00eatre al\u00e9atoires. Les rebonds sur les bords de la fen\u00eatre devront rester r\u00e9alistes.","title":"Animations"},{"location":"T10_Processing/02_Animations/T10.2_Animations/#animations","text":"Le principe Processing propose 2 fonctions pr\u00e9d\u00e9finies que le programmeur devra compl\u00e9ter : la fonction setup qui sera appel\u00e9e une seule fois d\u00e8s le d\u00e9but de l\u2019ex\u00e9cution du programme ; la fonction draw qui sera appel\u00e9e \u00e0 chaque image \u00e0 raison de 60 images par d\u00e9faut (on peut r\u00e9gler les FPS avec la fonction frameRate ). Ces deux fonctions ne prennent aucun param\u00e8tre et ne retournent aucune valeur. Exemple r = 2 dr = 2 def setup (): size ( 400 , 400 ) stroke ( 255 , 0 , 0 ) fill ( 0 ) # frameRate(20) def draw (): global r , dr background ( 255 ) ellipse ( 200 , 200 , 2 * r , 2 * r ) if r < 2 or r > 200 : dr = - dr r = r + dr Explication du code Les variables On d\u00e9finit deux variables r pour le rayon du disque et dr pour la quantit\u00e9 ajout\u00e9e \u00e0 ce rayon \u00e0 chaque image (frame). Avec Processing, il est imp\u00e9ratif de pr\u00e9ciser que ce sont des variables globales pour pouvoir les utiliser dans la fonction draw (ligne 9). La fonction setup On d\u00e9finit la taille de la zone de dessin, la couleur du contour (rouge) et du remplissage (noir). La fonction draw C'est ici qu'on d\u00e9crit ce qui doit se passer \u00e0 chaque image: on augmente le rayon r de la quantit\u00e9 dr , qu'on passe \u00e0 son oppos\u00e9 d\u00e8s que le rayon devient trop grand ou trop petit pour alterner augmentation et diminution. Exercice 2 \u00c9crire un programme permettant d\u2019avoir une balle rouge (cr\u00e9\u00e9e avec la fonction ellipse), de rayon constant cette fois, qui traverse la zone de dessin de gauche \u00e0 droite. Am\u00e9liorer le programme pour que la balle rebondisse sur les bords de la zone. Modifier le programme pour permettre \u00e0 la balle de se d\u00e9placer en diagonale. La position de d\u00e9part, la vitesse de d\u00e9part ainsi que la direction de d\u00e9part pourront \u00eatre al\u00e9atoires. Les rebonds sur les bords de la fen\u00eatre devront rester r\u00e9alistes.","title":"Animations"},{"location":"T10_Processing/03_Interactions/T10.3_Interactions/","text":"Interactions clavier et souris \u2693\ufe0e Nous allons maintenant nous int\u00e9resser \u00e0 l'interaction avec l'utilisateur. Pour l'instant (Processing offre \u00e9norm\u00e9ment de possibilit\u00e9s) nous allons nous contenter de la souris et du clavier. Souris \u2693\ufe0e Fonctions r\u00e9serv\u00e9es Processing propose 4 fonctions qui devront \u00eatre compl\u00e9t\u00e9es par le programmeur : le code se trouvant dans la fonction mousePressed est ex\u00e9cut\u00e9 \u00e0 chaque fois que l'utilisateur appuie sur un des boutons de la souris. le code se trouvant dans la fonction mouseReleased est ex\u00e9cut\u00e9 \u00e0 chaque fois qu'un bouton de la souris qui avait \u00e9t\u00e9 pr\u00e9alablement press\u00e9 est rel\u00e2ch\u00e9. le code se trouvant dans la fonction mouseMoved est ex\u00e9cut\u00e9 \u00e0 chaque image tant que la souris se d\u00e9place. le code se trouvant dans la fonction mouseDragged est est ex\u00e9cut\u00e9 \u00e0 chaque image tant que la souris se d\u00e9place et que le bouton de la souris est enfonc\u00e9. Ces 4 fonctions ne prennent aucun param\u00e8tre et ne retournent aucune valeur. De plus les variables mouseX et mouseY permettent de r\u00e9cup\u00e9rer la position de la souris. Exemple def setup (): global x , y , r size ( 400 , 400 ) noStroke () fill ( 0 ) r = 10 x = 200 y = 200 def mousePressed (): global x , y , r r = r + 100 x = mouseX y = mouseY def mouseReleased (): global r r = r - 100 def draw (): global x , y , r background ( 255 ) ellipse ( x , y , 2 * r , 2 * r ) Exercice 3 \u00c9crire un programme qui permettra d\u2019afficher un nouveau carr\u00e9 \u00e0 chaque clic de souris (sans effacer les carr\u00e9s d\u00e9j\u00e0 pr\u00e9sents). Le centre du carr\u00e9 devra se trouver au niveau du pointeur de la souris au moment du clic. La couleur du carr\u00e9 devra \u00eatre al\u00e9atoire. Clavier \u2693\ufe0e Fonctions r\u00e9serv\u00e9es Processing propose 2 fonctions qui devront \u00eatre compl\u00e9t\u00e9es par le programmeur : le code se trouvant dans la fonction keyPressed est ex\u00e9cut\u00e9 \u00e0 chaque fois que l\u2019utilisateur enfonce une touche ; le code se trouvant dans la fonction keyReleased est ex\u00e9cut\u00e9 quand une touche du clavier est rel\u00e2ch\u00e9e. Ces 2 fonctions ne prennent aucun param\u00e8tre et ne retournent aucune valeur. De plus la variable key (ou keyCode pour les touches non ASCII 1 ) r\u00e9cup\u00e8re la touche press\u00e9e. Exemple def setup (): size ( 200 , 200 ) textAlign ( CENTER ) background ( 255 ) def keyPressed (): if key == 'n' : background ( 0 ) fill ( 255 ) text ( \"NUIT\" , 100 , 100 ) elif key == 'j' : background ( 255 ) fill ( 0 ) text ( \"JOUR\" , 100 , 100 ) elif key == ENTER : background ( 255 , 0 , 0 ) elif key == ' ' : background ( 0 , 0 , 255 ) elif key == CODED : if keyCode == UP : background ( 127 ) fill ( 0 ) text ( \"Compris?\" , 100 , 100 ) def draw (): pass Exercice 4 \u00c9crire un programme permettant d\u2019afficher une balle noire qui pourra \u00eatre d\u00e9plac\u00e9e \u00e0 l\u2019aide des fl\u00e8ches du clavier. La balle ne devra pas pouvoir sortir de la fen\u00eatre. Exercice 5 Reprendre l\u2019animation de la balle qui rebondit sur les bords de la fen\u00eatre et le modifier pour qu\u2019un clic sur la balle change sa couleur et l\u2019acc\u00e9l\u00e8re. Pour d\u00e9tecter si un clic a lieu sur la balle, il faut calculer la distance entre le centre de la balle et le clic de la souris et savoir si elle est inf\u00e9rieure au rayon de la balle. On pourra utiliser la fonction suivante: def distance ( x1 , y1 , x2 , y2 ): return (( x1 - x2 ) ** 2 + ( y1 - y2 ) ** 2 ) ** 0.5 Facultatif : on peut ajouter un compteur du nombre de clics sur la balle. les fl\u00e8ches directionnelles (UP, DOWN, RIGHT, LEFT) ainsi que ALT, CONTROL, SHIFT. \u21a9","title":"Interactions clavier et souris"},{"location":"T10_Processing/03_Interactions/T10.3_Interactions/#interactions-clavier-et-souris","text":"Nous allons maintenant nous int\u00e9resser \u00e0 l'interaction avec l'utilisateur. Pour l'instant (Processing offre \u00e9norm\u00e9ment de possibilit\u00e9s) nous allons nous contenter de la souris et du clavier.","title":"Interactions clavier et souris"},{"location":"T10_Processing/03_Interactions/T10.3_Interactions/#souris","text":"Fonctions r\u00e9serv\u00e9es Processing propose 4 fonctions qui devront \u00eatre compl\u00e9t\u00e9es par le programmeur : le code se trouvant dans la fonction mousePressed est ex\u00e9cut\u00e9 \u00e0 chaque fois que l'utilisateur appuie sur un des boutons de la souris. le code se trouvant dans la fonction mouseReleased est ex\u00e9cut\u00e9 \u00e0 chaque fois qu'un bouton de la souris qui avait \u00e9t\u00e9 pr\u00e9alablement press\u00e9 est rel\u00e2ch\u00e9. le code se trouvant dans la fonction mouseMoved est ex\u00e9cut\u00e9 \u00e0 chaque image tant que la souris se d\u00e9place. le code se trouvant dans la fonction mouseDragged est est ex\u00e9cut\u00e9 \u00e0 chaque image tant que la souris se d\u00e9place et que le bouton de la souris est enfonc\u00e9. Ces 4 fonctions ne prennent aucun param\u00e8tre et ne retournent aucune valeur. De plus les variables mouseX et mouseY permettent de r\u00e9cup\u00e9rer la position de la souris. Exemple def setup (): global x , y , r size ( 400 , 400 ) noStroke () fill ( 0 ) r = 10 x = 200 y = 200 def mousePressed (): global x , y , r r = r + 100 x = mouseX y = mouseY def mouseReleased (): global r r = r - 100 def draw (): global x , y , r background ( 255 ) ellipse ( x , y , 2 * r , 2 * r ) Exercice 3 \u00c9crire un programme qui permettra d\u2019afficher un nouveau carr\u00e9 \u00e0 chaque clic de souris (sans effacer les carr\u00e9s d\u00e9j\u00e0 pr\u00e9sents). Le centre du carr\u00e9 devra se trouver au niveau du pointeur de la souris au moment du clic. La couleur du carr\u00e9 devra \u00eatre al\u00e9atoire.","title":"Souris"},{"location":"T10_Processing/03_Interactions/T10.3_Interactions/#clavier","text":"Fonctions r\u00e9serv\u00e9es Processing propose 2 fonctions qui devront \u00eatre compl\u00e9t\u00e9es par le programmeur : le code se trouvant dans la fonction keyPressed est ex\u00e9cut\u00e9 \u00e0 chaque fois que l\u2019utilisateur enfonce une touche ; le code se trouvant dans la fonction keyReleased est ex\u00e9cut\u00e9 quand une touche du clavier est rel\u00e2ch\u00e9e. Ces 2 fonctions ne prennent aucun param\u00e8tre et ne retournent aucune valeur. De plus la variable key (ou keyCode pour les touches non ASCII 1 ) r\u00e9cup\u00e8re la touche press\u00e9e. Exemple def setup (): size ( 200 , 200 ) textAlign ( CENTER ) background ( 255 ) def keyPressed (): if key == 'n' : background ( 0 ) fill ( 255 ) text ( \"NUIT\" , 100 , 100 ) elif key == 'j' : background ( 255 ) fill ( 0 ) text ( \"JOUR\" , 100 , 100 ) elif key == ENTER : background ( 255 , 0 , 0 ) elif key == ' ' : background ( 0 , 0 , 255 ) elif key == CODED : if keyCode == UP : background ( 127 ) fill ( 0 ) text ( \"Compris?\" , 100 , 100 ) def draw (): pass Exercice 4 \u00c9crire un programme permettant d\u2019afficher une balle noire qui pourra \u00eatre d\u00e9plac\u00e9e \u00e0 l\u2019aide des fl\u00e8ches du clavier. La balle ne devra pas pouvoir sortir de la fen\u00eatre. Exercice 5 Reprendre l\u2019animation de la balle qui rebondit sur les bords de la fen\u00eatre et le modifier pour qu\u2019un clic sur la balle change sa couleur et l\u2019acc\u00e9l\u00e8re. Pour d\u00e9tecter si un clic a lieu sur la balle, il faut calculer la distance entre le centre de la balle et le clic de la souris et savoir si elle est inf\u00e9rieure au rayon de la balle. On pourra utiliser la fonction suivante: def distance ( x1 , y1 , x2 , y2 ): return (( x1 - x2 ) ** 2 + ( y1 - y2 ) ** 2 ) ** 0.5 Facultatif : on peut ajouter un compteur du nombre de clics sur la balle. les fl\u00e8ches directionnelles (UP, DOWN, RIGHT, LEFT) ainsi que ALT, CONTROL, SHIFT. \u21a9","title":"Clavier"},{"location":"T11_Liens/Liens/","text":"Liens utiles \u2693\ufe0e \u00c0 propos de la sp\u00e9cialit\u00e9 NSI \u2693\ufe0e Le site Eduscol \u00c0 propos de la culture des sciences de l'informatique \u2693\ufe0e Interstices Inria \u00c0 propos de l'orientation \u2693\ufe0e Talents du num\u00e9rique Une brochure int\u00e9ressante. Pour se creuser la t\u00eate \u2693\ufe0e Quelques sites de challenges/\u00e9nigmes/d\u00e9fis de programmation: PyD\u00e9fis Advent of Code MicroContest Hackinscience Pour se former en autonomie \u2693\ufe0e Au cas o\u00f9 vous vous ennuieriez... France-IOI CheckIO CodinGame","title":"Liens utiles"},{"location":"T11_Liens/Liens/#liens-utiles","text":"","title":"Liens utiles"},{"location":"T11_Liens/Liens/#a-propos-de-la-specialite-nsi","text":"Le site Eduscol","title":"\u00c0 propos de la sp\u00e9cialit\u00e9 NSI"},{"location":"T11_Liens/Liens/#a-propos-de-la-culture-des-sciences-de-linformatique","text":"Interstices Inria","title":"\u00c0 propos de la culture des sciences de l'informatique"},{"location":"T11_Liens/Liens/#a-propos-de-lorientation","text":"Talents du num\u00e9rique Une brochure int\u00e9ressante.","title":"\u00c0 propos de l'orientation"},{"location":"T11_Liens/Liens/#pour-se-creuser-la-tete","text":"Quelques sites de challenges/\u00e9nigmes/d\u00e9fis de programmation: PyD\u00e9fis Advent of Code MicroContest Hackinscience","title":"Pour se creuser la t\u00eate"},{"location":"T11_Liens/Liens/#pour-se-former-en-autonomie","text":"Au cas o\u00f9 vous vous ennuieriez... France-IOI CheckIO CodinGame","title":"Pour se former en autonomie"},{"location":"T12_Divers/accueil/","text":"Divers \u2693\ufe0e Cette section traite de points qui ne sont pas au programme mais qui peuvent vous simplifier la vie.","title":"Divers"},{"location":"T12_Divers/accueil/#divers","text":"Cette section traite de points qui ne sont pas au programme mais qui peuvent vous simplifier la vie.","title":"Divers"},{"location":"T12_Divers/1Habitudes/Travail/","text":"Bonnes habitudes de travail \u2693\ufe0e Dossiers, fichiers et versionning \u2693\ufe0e Cette ann\u00e9e en NSI nous allons manipuler un certain nombre de fichiers. Il est important de les nommer et les classer de fa\u00e7on rigoureuse pour les retrouver rapidement et les partager. Spoiler alert Ces conseils ne sont pas r\u00e9serv\u00e9s \u00e0 NSI, ils peuvent s'appliquer \u00e0 toutes les disciplines... Conseils Utilisez des dossiers pour classer vos fichiers. Il n'y en a jamais assez. Prenez l'habitude de faire plusieurs sauvegardes de vos documents (sur le r\u00e9seau du lyc\u00e9e, sur l'ENT, sur cl\u00e9 USB). \u00c9vitez dans les noms de fichiers et de dossiers les espaces (utilisez plut\u00f4t _ ) ainsi que les caract\u00e8res accentu\u00e9s et les caract\u00e8res sp\u00e9ciaux. Un nom de fichier doit \u00eatre parlant (un peu comme une variable en fait). On \u00e9vitera de nommer ses codes Python python1.py , python2.py , python3.py , etc. Mais plut\u00f4t 1NSI_T7_tri_selection.py par exemple pour un exercice de programmation sur le tri par selection au th\u00e8me 7. Lorsqu'on travaille sur un projet ou un programme cons\u00e9quent, il peut \u00eatre utile de conserver des archives du travail \u00e0 plusieurs \u00e9tapes de l'\u00e9laboration, plut\u00f4t que de ne conserver que la derni\u00e8re version. \u00c0 cet effet on pourra num\u00e9roter : 1NSI_projet_morpion_v1.py , puis 1NSI_projet_morpion_v2.py , 1NSI_projet_morpion_v3.py , etc. Espace de travail \u2693\ufe0e Il est conseill\u00e9 de travailler avec 3 espaces: l'\u00e9cran de l'ordinateur partitionn\u00e9 avec les 2 premiers espaces: ce site et un IDE; une feuille de papier et un stylo comme troisi\u00e8me espace...","title":"Bonnes habitudes de travail"},{"location":"T12_Divers/1Habitudes/Travail/#bonnes-habitudes-de-travail","text":"","title":"Bonnes habitudes de travail"},{"location":"T12_Divers/1Habitudes/Travail/#dossiers-fichiers-et-versionning","text":"Cette ann\u00e9e en NSI nous allons manipuler un certain nombre de fichiers. Il est important de les nommer et les classer de fa\u00e7on rigoureuse pour les retrouver rapidement et les partager. Spoiler alert Ces conseils ne sont pas r\u00e9serv\u00e9s \u00e0 NSI, ils peuvent s'appliquer \u00e0 toutes les disciplines... Conseils Utilisez des dossiers pour classer vos fichiers. Il n'y en a jamais assez. Prenez l'habitude de faire plusieurs sauvegardes de vos documents (sur le r\u00e9seau du lyc\u00e9e, sur l'ENT, sur cl\u00e9 USB). \u00c9vitez dans les noms de fichiers et de dossiers les espaces (utilisez plut\u00f4t _ ) ainsi que les caract\u00e8res accentu\u00e9s et les caract\u00e8res sp\u00e9ciaux. Un nom de fichier doit \u00eatre parlant (un peu comme une variable en fait). On \u00e9vitera de nommer ses codes Python python1.py , python2.py , python3.py , etc. Mais plut\u00f4t 1NSI_T7_tri_selection.py par exemple pour un exercice de programmation sur le tri par selection au th\u00e8me 7. Lorsqu'on travaille sur un projet ou un programme cons\u00e9quent, il peut \u00eatre utile de conserver des archives du travail \u00e0 plusieurs \u00e9tapes de l'\u00e9laboration, plut\u00f4t que de ne conserver que la derni\u00e8re version. \u00c0 cet effet on pourra num\u00e9roter : 1NSI_projet_morpion_v1.py , puis 1NSI_projet_morpion_v2.py , 1NSI_projet_morpion_v3.py , etc.","title":"Dossiers, fichiers et versionning"},{"location":"T12_Divers/1Habitudes/Travail/#espace-de-travail","text":"Il est conseill\u00e9 de travailler avec 3 espaces: l'\u00e9cran de l'ordinateur partitionn\u00e9 avec les 2 premiers espaces: ce site et un IDE; une feuille de papier et un stylo comme troisi\u00e8me espace...","title":"Espace de travail"},{"location":"T12_Divers/2Jupyter/Jupyter/","text":"Jupyter \u2693\ufe0e Notebooks \u2693\ufe0e Jupyter est une application Web utilis\u00e9e pour programmer dans plusieurs langages, en particulier en Python. Jupyter permet de r\u00e9aliser des notebooks , qui sont des documents interactifs contenant \u00e0 la fois des zones de texte (en markdown ) et des zones de code informatique, qui peut s'ex\u00e9cuter directement dans la fen\u00eatre. Cela permet donc de suivre des indications et de coder dans la m\u00eame fen\u00eatre. Cela sera particuli\u00e8rement adapt\u00e9 pour des s\u00e9ances d'exercices basiques, plut\u00f4t que d'utiliser un fichier .py \u00e0 chaque fois avec Thonny. Extension L'extension des fichiers notebooks Jupyter est .ipynb . Ex\u00e9cution du code La zone s\u00e9lectionn\u00e9e s'ex\u00e9cute avec le raccourci CTRL+ENTER . Au lyc\u00e9e \u2693\ufe0e Vid\u00e9o En ligne \u2693\ufe0e Un service Jupyter est int\u00e9gr\u00e9 \u00e0 l'ENT. Il suffit pour cela de lancer l'application depuis le mur des applications de l'ENT. Vid\u00e9o","title":"Jupyter"},{"location":"T12_Divers/2Jupyter/Jupyter/#jupyter","text":"","title":"Jupyter"},{"location":"T12_Divers/2Jupyter/Jupyter/#notebooks","text":"Jupyter est une application Web utilis\u00e9e pour programmer dans plusieurs langages, en particulier en Python. Jupyter permet de r\u00e9aliser des notebooks , qui sont des documents interactifs contenant \u00e0 la fois des zones de texte (en markdown ) et des zones de code informatique, qui peut s'ex\u00e9cuter directement dans la fen\u00eatre. Cela permet donc de suivre des indications et de coder dans la m\u00eame fen\u00eatre. Cela sera particuli\u00e8rement adapt\u00e9 pour des s\u00e9ances d'exercices basiques, plut\u00f4t que d'utiliser un fichier .py \u00e0 chaque fois avec Thonny. Extension L'extension des fichiers notebooks Jupyter est .ipynb . Ex\u00e9cution du code La zone s\u00e9lectionn\u00e9e s'ex\u00e9cute avec le raccourci CTRL+ENTER .","title":"Notebooks"},{"location":"T12_Divers/2Jupyter/Jupyter/#au-lycee","text":"Vid\u00e9o","title":"Au lyc\u00e9e"},{"location":"T12_Divers/2Jupyter/Jupyter/#en-ligne","text":"Un service Jupyter est int\u00e9gr\u00e9 \u00e0 l'ENT. Il suffit pour cela de lancer l'application depuis le mur des applications de l'ENT. Vid\u00e9o","title":"En ligne"},{"location":"T12_Divers/3Clavier/Clavier/","text":"Usage du clavier \u2693\ufe0e Utiliser le clavier est souvent bien plus pratique et surtout plus rapide qu'utiliser la souris. Encore faut-il apprendre \u00e0 l'apprivoiser... La s\u00e9lection au clavier Outre les touches DEBUT et FIN qui permettent d'atteindre rapidement le d\u00e9but ou la fin d'une ligne, les fl\u00e8ches directionelles servent \u00e9videmment \u00e0 se d\u00e9placer dans du texte. Mais combin\u00e9es: \u00e0 la touche CTRL : elles permettent de se d\u00e9placer de mot en mot; \u00e0 la touche MAJ : elles permettent de s\u00e9lectionner un caract\u00e8re; aux touches MAJ et CTRL : elles permettent de s\u00e9lectionner un mot. De m\u00eame, en se pla\u00e7ant en d\u00e9but d'une ligne et en combinant la touche MAJ et FIN , on s\u00e9lectionne la ligne enti\u00e8re. Les raccourcis clavier Il existe de tr\u00e8s nombreux raccourcis clavier qui permettent d'ex\u00e9cuter des t\u00e2ches courantes sans passer par les menus du logiciel. Certains sont (quasi-)universels, c'est-\u00e0-dire que ce sont les m\u00eames sur tous les logiciels, d'autres sont sp\u00e9cifiques \u00e0 chaque logiciel. Il est important d'en conna\u00eetre quelques-uns pour \u00eatre plus efficace. Les universels La triplette magique CTRL+X , CTRL+C , CTRL+V pour couper, copier, coller; CTRL+O pour ouvrir un fichier CTRL+N pour cr\u00e9er un nouveau document; CTRL+S pour sauvegarder le document en cours; CTRL+MAJ+S pour sauvegarder en pr\u00e9cisant le nom du fichier; CTRL+Z pour annuler la derni\u00e8re action, CTRL+Y ou CTRL+MAJ+Z pour la r\u00e9tablir; CTRL+W pour fermer un onglet; CTRL+Q ou ALT+F4 pour fermer le logiciel; CTRL+A pour s\u00e9lectionner tout (All). IDE \u00c0 chercher de suite lorsqu'on utilise un nouvel IDE, les raccourcis pour les actions suivantes (entre parenth\u00e8ses ceux de Thonny): ex\u00e9cuter le code ( F5 ) commenter/d\u00e9commenter une ligne ( CTRL+M ) Navigateur Web CTRL+T pour ouvrir un nouvel onglet; CTRL+H pour ouvrir l'historique; combiner CTRL + clic pour forcer l'ouverture d'un lien dans un nouvel onglet; combiner MAJ + clic pour forcer l'ouverture d'un lien dans une nouvelle fen\u00eatre;","title":"Usage du clavier"},{"location":"T12_Divers/3Clavier/Clavier/#usage-du-clavier","text":"Utiliser le clavier est souvent bien plus pratique et surtout plus rapide qu'utiliser la souris. Encore faut-il apprendre \u00e0 l'apprivoiser... La s\u00e9lection au clavier Outre les touches DEBUT et FIN qui permettent d'atteindre rapidement le d\u00e9but ou la fin d'une ligne, les fl\u00e8ches directionelles servent \u00e9videmment \u00e0 se d\u00e9placer dans du texte. Mais combin\u00e9es: \u00e0 la touche CTRL : elles permettent de se d\u00e9placer de mot en mot; \u00e0 la touche MAJ : elles permettent de s\u00e9lectionner un caract\u00e8re; aux touches MAJ et CTRL : elles permettent de s\u00e9lectionner un mot. De m\u00eame, en se pla\u00e7ant en d\u00e9but d'une ligne et en combinant la touche MAJ et FIN , on s\u00e9lectionne la ligne enti\u00e8re. Les raccourcis clavier Il existe de tr\u00e8s nombreux raccourcis clavier qui permettent d'ex\u00e9cuter des t\u00e2ches courantes sans passer par les menus du logiciel. Certains sont (quasi-)universels, c'est-\u00e0-dire que ce sont les m\u00eames sur tous les logiciels, d'autres sont sp\u00e9cifiques \u00e0 chaque logiciel. Il est important d'en conna\u00eetre quelques-uns pour \u00eatre plus efficace. Les universels La triplette magique CTRL+X , CTRL+C , CTRL+V pour couper, copier, coller; CTRL+O pour ouvrir un fichier CTRL+N pour cr\u00e9er un nouveau document; CTRL+S pour sauvegarder le document en cours; CTRL+MAJ+S pour sauvegarder en pr\u00e9cisant le nom du fichier; CTRL+Z pour annuler la derni\u00e8re action, CTRL+Y ou CTRL+MAJ+Z pour la r\u00e9tablir; CTRL+W pour fermer un onglet; CTRL+Q ou ALT+F4 pour fermer le logiciel; CTRL+A pour s\u00e9lectionner tout (All). IDE \u00c0 chercher de suite lorsqu'on utilise un nouvel IDE, les raccourcis pour les actions suivantes (entre parenth\u00e8ses ceux de Thonny): ex\u00e9cuter le code ( F5 ) commenter/d\u00e9commenter une ligne ( CTRL+M ) Navigateur Web CTRL+T pour ouvrir un nouvel onglet; CTRL+H pour ouvrir l'historique; combiner CTRL + clic pour forcer l'ouverture d'un lien dans un nouvel onglet; combiner MAJ + clic pour forcer l'ouverture d'un lien dans une nouvelle fen\u00eatre;","title":"Usage du clavier"},{"location":"T12_Divers/4Chaines/Strings/","text":"Manipulation de cha\u00eenes de caract\u00e8res \u2693\ufe0e Totalement hors programme, la manipulation des cha\u00eenes de caract\u00e8res (type string, str ) peut \u00eatre pourtant bien pratique pour g\u00e9rer l'affichage de certaines sorties de programmes, ou bien pour faire du text parsing dans des fichiers textes. \u00c0 savoir On \u00e9crit les cha\u00eenes de caract\u00e8res avec des guillemets simples 'NSI' ou doubles \"NSI\" . Peu importe, sauf si la cha\u00eene de caract\u00e8res comporte une apostrophe ' , auquel cas il est obligatoire d'utiliser les doubles. Une cha\u00eene de caract\u00e8res est un objet iterable : on peut donc le parcourir, r\u00e9cup\u00e9rer sa longueur et ses caract\u00e8res gr\u00e2ce \u00e0 leur indice. >>> mot = \"Guido\" >>> len ( mot ) 5 >>> mot [ 2 ] 'i' >>> for l in mot : print ( l ) G u i d o >>> Une cha\u00eene de caract\u00e8res est un objet non mutable : on ne peut pas le modifier. >>> mot = \"Guido\" >>> mot [ 4 ] = 'e' Traceback ( most recent call last ): File \"<pyshell>\" , line 1 , in < module > TypeError : 'str' object does not support item assignment >>> Concat\u00e9nation La concat\u00e9nation de plusieurs cha\u00eenes de caract\u00e8res consiste tout simplement \u00e0 les mettre bout \u00e0 bout. Elle se fait en Python avec l'op\u00e9rateur + . On peut \u00e9galement multiplier une cha\u00eene de caract\u00e8res par un entier 1 . >>> a = \"truc\" >>> b = \"muche\" >>> a + b 'trucmuche' >>> 14 * \"miaou\" 'miaoumiaoumiaoumiaoumiaoumiaoumiaoumiaoumiaoumiaoumiaoumiaoumiaoumiaou' Conversions On peut convertir un entier, un flottant en cha\u00eene de caract\u00e8res avec la fonction str : >>> str ( 2 ) '2' >>> str ( 2.0 ) '2.0' On peut convertir une cha\u00eene de caract\u00e8res en liste avec la fonction list : >>> list ( \"Python\" ) [ 'P' , 'y' , 't' , 'h' , 'o' , 'n' ] split and join On peut d\u00e9couper une cha\u00eene de caract\u00e8res avec la m\u00e9thode split . Sans param\u00e8tre, elle d\u00e9coupe sur le caract\u00e8re espace. Avec un param\u00e8tre de type str , elle d\u00e9coupe selon ce caract\u00e8re. Dans les deux cas, le caract\u00e8re de d\u00e9coupe est supprim\u00e9. Elle retourne une liste. >>> p = \"Un ordinateur, c'est compl\u00e8tement con.\" >>> p . split () [ 'Un' , 'ordinateur,' , \"c'est\" , 'compl\u00e8tement' , 'con.' ] >>> m = 'Abracadabra' >>> m . split ( 'a' ) [ 'Abr' , 'c' , 'd' , 'br' , '' ] >>> Dans l'autre sens, on peut fusionner avec la m\u00e9thode join les \u00e9lements d'une liste dont tous les \u00e9l\u00e9ments sont de type str , avec un caract\u00e8re d'insertion entre les \u00e9l\u00e9ments. >>> l = [ 'P' , 'y' , 't' , 'h' , 'o' , 'n' ] >>> \"\" . join ( l ) 'Python' >>> \" \" . join ([ \"NSI\" , \"c'est\" , \"de\" , \"l'eau\" ]) \"NSI, c'est de l'eau\" puisque la multiplication par un entier n'est qu'un raccourci pour l'addition de m\u00eames termes. \u21a9","title":"Manipulation de cha\u00eenes de caract\u00e8res"},{"location":"T12_Divers/4Chaines/Strings/#manipulation-de-chaines-de-caracteres","text":"Totalement hors programme, la manipulation des cha\u00eenes de caract\u00e8res (type string, str ) peut \u00eatre pourtant bien pratique pour g\u00e9rer l'affichage de certaines sorties de programmes, ou bien pour faire du text parsing dans des fichiers textes. \u00c0 savoir On \u00e9crit les cha\u00eenes de caract\u00e8res avec des guillemets simples 'NSI' ou doubles \"NSI\" . Peu importe, sauf si la cha\u00eene de caract\u00e8res comporte une apostrophe ' , auquel cas il est obligatoire d'utiliser les doubles. Une cha\u00eene de caract\u00e8res est un objet iterable : on peut donc le parcourir, r\u00e9cup\u00e9rer sa longueur et ses caract\u00e8res gr\u00e2ce \u00e0 leur indice. >>> mot = \"Guido\" >>> len ( mot ) 5 >>> mot [ 2 ] 'i' >>> for l in mot : print ( l ) G u i d o >>> Une cha\u00eene de caract\u00e8res est un objet non mutable : on ne peut pas le modifier. >>> mot = \"Guido\" >>> mot [ 4 ] = 'e' Traceback ( most recent call last ): File \"<pyshell>\" , line 1 , in < module > TypeError : 'str' object does not support item assignment >>> Concat\u00e9nation La concat\u00e9nation de plusieurs cha\u00eenes de caract\u00e8res consiste tout simplement \u00e0 les mettre bout \u00e0 bout. Elle se fait en Python avec l'op\u00e9rateur + . On peut \u00e9galement multiplier une cha\u00eene de caract\u00e8res par un entier 1 . >>> a = \"truc\" >>> b = \"muche\" >>> a + b 'trucmuche' >>> 14 * \"miaou\" 'miaoumiaoumiaoumiaoumiaoumiaoumiaoumiaoumiaoumiaoumiaoumiaoumiaoumiaou' Conversions On peut convertir un entier, un flottant en cha\u00eene de caract\u00e8res avec la fonction str : >>> str ( 2 ) '2' >>> str ( 2.0 ) '2.0' On peut convertir une cha\u00eene de caract\u00e8res en liste avec la fonction list : >>> list ( \"Python\" ) [ 'P' , 'y' , 't' , 'h' , 'o' , 'n' ] split and join On peut d\u00e9couper une cha\u00eene de caract\u00e8res avec la m\u00e9thode split . Sans param\u00e8tre, elle d\u00e9coupe sur le caract\u00e8re espace. Avec un param\u00e8tre de type str , elle d\u00e9coupe selon ce caract\u00e8re. Dans les deux cas, le caract\u00e8re de d\u00e9coupe est supprim\u00e9. Elle retourne une liste. >>> p = \"Un ordinateur, c'est compl\u00e8tement con.\" >>> p . split () [ 'Un' , 'ordinateur,' , \"c'est\" , 'compl\u00e8tement' , 'con.' ] >>> m = 'Abracadabra' >>> m . split ( 'a' ) [ 'Abr' , 'c' , 'd' , 'br' , '' ] >>> Dans l'autre sens, on peut fusionner avec la m\u00e9thode join les \u00e9lements d'une liste dont tous les \u00e9l\u00e9ments sont de type str , avec un caract\u00e8re d'insertion entre les \u00e9l\u00e9ments. >>> l = [ 'P' , 'y' , 't' , 'h' , 'o' , 'n' ] >>> \"\" . join ( l ) 'Python' >>> \" \" . join ([ \"NSI\" , \"c'est\" , \"de\" , \"l'eau\" ]) \"NSI, c'est de l'eau\" puisque la multiplication par un entier n'est qu'un raccourci pour l'addition de m\u00eames termes. \u21a9","title":"Manipulation de cha\u00eenes de caract\u00e8res"},{"location":"T12_Divers/5Trucs/Trucs/","text":"Trucs et astuces \u2693\ufe0e Page en construction... 1. R\u00e9cup\u00e9rer une entr\u00e9e clavier dans un programme \u2693\ufe0e Entr\u00e9e clavier En Python, la fonction input permet de faire une pause dans l'ex\u00e9cution du programme et attend que l'utilisateur fasse une entr\u00e9e au clavier (termin\u00e9e bien entendu par la touche ENTER ). Cette fonction renvoie cette entr\u00e9e syst\u00e9matiquement sous le type str . Il faudra penser \u00e0 la convertir en int ou float si la saisie attendue est num\u00e9rique. On peut, de fa\u00e7on facultative, pr\u00e9ciser en argument une cha\u00eene de caract\u00e8re qui sera affich\u00e9e au pr\u00e9alable (pratique pour poser une question). Exemples Ces exemples sont \u00e0 tester dans un IDE. Saisie d'un texte (sans argument) >>> r = input () salut >>> r 'salut' >>> type ( r ) < class ' str '> >>> Saisie d'un texte (avec argument) >>> r = input ( \"Quel \u00e2ge avez-vous? \" ) Quel \u00e2ge avez - vous ? 15 >>> r '15' >>> type ( r ) < class ' str '> >>> Conversion de la saisie en int >>> r = int ( input ( \"Quel \u00e2ge avez-vous?\" )) Quel \u00e2ge avez - vous ? 15 >>> r 15 >>> type ( r ) < class ' int '> >>> 2. L'incr\u00e9mentation d'une variable. \u2693\ufe0e \u00abIncr\u00e9menter\u00bb une variable signifie l'augmenter. Imaginons une variable appel\u00e9e compteur . Au d\u00e9marrage de notre programme, elle est initialis\u00e9e \u00e0 la valeur 0. >>> compteur = 0 Consid\u00e9rons qu'\u00e0 un moment du programme, cette variable doit \u00eatre modifi\u00e9e, par exemple en lui ajoutant 1. En Python, cela s'\u00e9crira : >>> compteur = compteur + 1 Observ\u00e9e avec des yeux de math\u00e9maticien, la pr\u00e9c\u00e9dente instruction est une horreur. Vue avec des yeux d'informaticien, voil\u00e0 comment est interpr\u00e9t\u00e9e la commande >>> compteur = compteur + 1 On \u00e9value la partie droite de l'\u00e9galit\u00e9, donc l'expression compteur + 1 . On va donc chercher le contenu de la variable compteur . Si celle-ci n'existe pas, un message d'erreur est renvoy\u00e9. On additionne 1 au contenu de la variable compteur . On \u00e9crase le contenu actuel de la variable compteur avec la valeur obtenue au 3. \u00c0 la fin de ces op\u00e9rations, la variable compteur a bien augment\u00e9 de 1. Cette proc\u00e9dure d' incr\u00e9mentation est tr\u00e8s tr\u00e8s classique, il faut la ma\u00eetriser parfaitement ! Syntaxe classique et syntaxe Pythonesque L'incr\u00e9mentation d'une variable compteur s'\u00e9crira donc en Python : >>> compteur = compteur + 1 Mais il existe aussi une syntaxe particuli\u00e8re, un peu plus courte : >>> compteur += 1 Cette syntaxe peut se ranger dans la cat\u00e9gorie des sucres syntaxiques : c'est bien de la conna\u00eetre, c'est amusant de s'en servir, mais son utilisation n'est en rien obligatoire et peut avoir un effet n\u00e9faste, celui d'oublier r\u00e9ellement ce qu'il se passe derri\u00e8re. 3. Utilisation du module PIL \u2693\ufe0e Le module PIL permet la cr\u00e9ation et la manipulation d'images. Voir ici .","title":"Trucs et astuces"},{"location":"T12_Divers/5Trucs/Trucs/#trucs-et-astuces","text":"Page en construction...","title":"Trucs et astuces"},{"location":"T12_Divers/5Trucs/Trucs/#1-recuperer-une-entree-clavier-dans-un-programme","text":"Entr\u00e9e clavier En Python, la fonction input permet de faire une pause dans l'ex\u00e9cution du programme et attend que l'utilisateur fasse une entr\u00e9e au clavier (termin\u00e9e bien entendu par la touche ENTER ). Cette fonction renvoie cette entr\u00e9e syst\u00e9matiquement sous le type str . Il faudra penser \u00e0 la convertir en int ou float si la saisie attendue est num\u00e9rique. On peut, de fa\u00e7on facultative, pr\u00e9ciser en argument une cha\u00eene de caract\u00e8re qui sera affich\u00e9e au pr\u00e9alable (pratique pour poser une question). Exemples Ces exemples sont \u00e0 tester dans un IDE. Saisie d'un texte (sans argument) >>> r = input () salut >>> r 'salut' >>> type ( r ) < class ' str '> >>> Saisie d'un texte (avec argument) >>> r = input ( \"Quel \u00e2ge avez-vous? \" ) Quel \u00e2ge avez - vous ? 15 >>> r '15' >>> type ( r ) < class ' str '> >>> Conversion de la saisie en int >>> r = int ( input ( \"Quel \u00e2ge avez-vous?\" )) Quel \u00e2ge avez - vous ? 15 >>> r 15 >>> type ( r ) < class ' int '> >>>","title":"1. R\u00e9cup\u00e9rer une entr\u00e9e clavier dans un programme"},{"location":"T12_Divers/5Trucs/Trucs/#2-lincrementation-dune-variable","text":"\u00abIncr\u00e9menter\u00bb une variable signifie l'augmenter. Imaginons une variable appel\u00e9e compteur . Au d\u00e9marrage de notre programme, elle est initialis\u00e9e \u00e0 la valeur 0. >>> compteur = 0 Consid\u00e9rons qu'\u00e0 un moment du programme, cette variable doit \u00eatre modifi\u00e9e, par exemple en lui ajoutant 1. En Python, cela s'\u00e9crira : >>> compteur = compteur + 1 Observ\u00e9e avec des yeux de math\u00e9maticien, la pr\u00e9c\u00e9dente instruction est une horreur. Vue avec des yeux d'informaticien, voil\u00e0 comment est interpr\u00e9t\u00e9e la commande >>> compteur = compteur + 1 On \u00e9value la partie droite de l'\u00e9galit\u00e9, donc l'expression compteur + 1 . On va donc chercher le contenu de la variable compteur . Si celle-ci n'existe pas, un message d'erreur est renvoy\u00e9. On additionne 1 au contenu de la variable compteur . On \u00e9crase le contenu actuel de la variable compteur avec la valeur obtenue au 3. \u00c0 la fin de ces op\u00e9rations, la variable compteur a bien augment\u00e9 de 1. Cette proc\u00e9dure d' incr\u00e9mentation est tr\u00e8s tr\u00e8s classique, il faut la ma\u00eetriser parfaitement ! Syntaxe classique et syntaxe Pythonesque L'incr\u00e9mentation d'une variable compteur s'\u00e9crira donc en Python : >>> compteur = compteur + 1 Mais il existe aussi une syntaxe particuli\u00e8re, un peu plus courte : >>> compteur += 1 Cette syntaxe peut se ranger dans la cat\u00e9gorie des sucres syntaxiques : c'est bien de la conna\u00eetre, c'est amusant de s'en servir, mais son utilisation n'est en rien obligatoire et peut avoir un effet n\u00e9faste, celui d'oublier r\u00e9ellement ce qu'il se passe derri\u00e8re.","title":"2. L'incr\u00e9mentation d'une variable."},{"location":"T12_Divers/5Trucs/Trucs/#3-utilisation-du-module-pil","text":"Le module PIL permet la cr\u00e9ation et la manipulation d'images. Voir ici .","title":"3. Utilisation du module PIL"},{"location":"data/example_GL/","text":"En route vers Mkdocs ! \u00e0 22h52 On teste Pyodide \u2693\ufe0e Une console ? \u2693\ufe0e >>> Il semblerait que \u00e7a marche... Bon faudra peut-\u00eatre retoucher le CSS Un IDE ? \u2693\ufe0e bien ? \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f \\(f(x)= \\frac{x}{2}+5\\) test Exercice 6 \u00c9nonc\u00e9 Calculer la somme des entiers \\(n\\) de 0 jusqu'\u00e0 100. \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f Solution somme = 0 for n in range ( 0 , 101 ): somme = somme + n print ( somme ) Exercice 7 \u00c9nonc\u00e9 Calculer la somme des entiers \\(n\\) de 0 jusqu'\u00e0 100. \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f Solution ```python somme = 0 for n in range(0,101): somme = somme + n print(somme) Exercice 8 \u00c9nonc\u00e9 Calculer la somme des entiers \\(n\\) de 0 jusqu'\u00e0 100. \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f Solution ```python somme = 0 for n in range(0,101): somme = somme + n print(somme) Remarque un truc super utile pour mettre des infos suppl\u00e9mentaires La cryptographie blablabla... On saute Attention Un exercice est inclus dans le script ci-dessous. def ens_triangle ( n ): \"\"\"Renvoie l'ensemble des points - \u00e0 coordonn\u00e9es enti\u00e8res ; - inclus dans le triangle de c\u00f4t\u00e9 n. \"\"\" points = {} for i in range ( n + 1 ): for j in range ( n + 1 ): if i + j <= n : points . add ( ( i , j ) ) return points R\u00e9ponses aux probl\u00e8mes \u2693\ufe0e R\u00e9ponses Probl\u00e8me Vous pouvez obtenir la r\u00e9ponse, mais avez-vous bien cherch\u00e9 avant ? Triangle ; \\(n=6\\) Il y a \\(78\\) triangles. Rectangle ; \\(n=6\\) et \\(m=10\\) Il y a \\(1155\\) rectangles. Hexagone ; \\(n=5\\) Il y a \\(496\\) triangles. Hexagone \u00e9toil\u00e9 ; \\(n=3\\) Il y a \\(354\\) triangles. test abr\u00e9viations \u2693\ufe0e Il suffit de faire comme \u00e7a et voil\u00e0. admonitions \u2693\ufe0e Note fdsfjlk fdsjflk dskfl vd Info fdjslkfs sdfkjdlk sdfklj fjsdlfk Method Description GET Fetch resource PUT Update resource DELETE Delete resource Hormis la base 10, deux bases sont utilis\u00e9es en informatique : la base 2 (le syst\u00e8me binaire ) la base 16 (le syst\u00e8me hexad\u00e9cimal ) Dans toute la suite, la base dans laquelle le nombre est \u00e9crit sera pr\u00e9cis\u00e9e en indice. Exemple : \\(13_{10}=1101_2=\\rm{D}_{16}\\) I. Le syst\u00e8me binaire \u2693\ufe0e En base 2, on ne dispose que des chiffres 0 et 1 . Le syst\u00e8me binaire est un syst\u00e8me de num\u00e9ration de position (comme le syst\u00e8me d\u00e9cimal, hexad\u00e9cimal... mais pas comme le syst\u00e8me romain). \u00c0 chaque rang correspond une puissance de 2. Du binaire vers le d\u00e9cimal : \u2693\ufe0e ... 128 64 32 16 8 4 2 1 ... \\(2^7\\) \\(2^6\\) \\(2^5\\) \\(2^4\\) \\(2^3\\) \\(2^2\\) \\(2^1\\) \\(2^0\\) ... 1 1 0 1 0 0 1 0 \\(11010010_2=1 \\times 2^7+ 1 \\times 2^6+0 \\times 2^5+1 \\times 2^4+0 \\times 2^3+0 \\times 2^2+1 \\times 2^1+0 \\times 2^0=128+64+32+2=210_{10}\\) Le nombre binaire 11010010 correspond donc au nombre d\u00e9cimal 210. ##### En python : En Python, on peut utiliser la fonction int(\"nombre\",base) . >>>","title":"example GL"},{"location":"data/example_GL/#on-teste-pyodide","text":"","title":"On teste Pyodide"},{"location":"data/example_GL/#une-console","text":">>> Il semblerait que \u00e7a marche... Bon faudra peut-\u00eatre retoucher le CSS","title":"Une console ?"},{"location":"data/example_GL/#un-ide","text":"bien ? \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f \\(f(x)= \\frac{x}{2}+5\\) test Exercice 6 \u00c9nonc\u00e9 Calculer la somme des entiers \\(n\\) de 0 jusqu'\u00e0 100. \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f Solution somme = 0 for n in range ( 0 , 101 ): somme = somme + n print ( somme ) Exercice 7 \u00c9nonc\u00e9 Calculer la somme des entiers \\(n\\) de 0 jusqu'\u00e0 100. \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f Solution ```python somme = 0 for n in range(0,101): somme = somme + n print(somme) Exercice 8 \u00c9nonc\u00e9 Calculer la somme des entiers \\(n\\) de 0 jusqu'\u00e0 100. \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f Solution ```python somme = 0 for n in range(0,101): somme = somme + n print(somme) Remarque un truc super utile pour mettre des infos suppl\u00e9mentaires La cryptographie blablabla... On saute Attention Un exercice est inclus dans le script ci-dessous. def ens_triangle ( n ): \"\"\"Renvoie l'ensemble des points - \u00e0 coordonn\u00e9es enti\u00e8res ; - inclus dans le triangle de c\u00f4t\u00e9 n. \"\"\" points = {} for i in range ( n + 1 ): for j in range ( n + 1 ): if i + j <= n : points . add ( ( i , j ) ) return points","title":"Un IDE ?"},{"location":"data/example_GL/#reponses-aux-problemes","text":"R\u00e9ponses Probl\u00e8me Vous pouvez obtenir la r\u00e9ponse, mais avez-vous bien cherch\u00e9 avant ? Triangle ; \\(n=6\\) Il y a \\(78\\) triangles. Rectangle ; \\(n=6\\) et \\(m=10\\) Il y a \\(1155\\) rectangles. Hexagone ; \\(n=5\\) Il y a \\(496\\) triangles. Hexagone \u00e9toil\u00e9 ; \\(n=3\\) Il y a \\(354\\) triangles.","title":"R\u00e9ponses aux probl\u00e8mes "},{"location":"data/example_GL/#test-abreviations","text":"Il suffit de faire comme \u00e7a et voil\u00e0.","title":"test abr\u00e9viations"},{"location":"data/example_GL/#admonitions","text":"Note fdsfjlk fdsjflk dskfl vd Info fdjslkfs sdfkjdlk sdfklj fjsdlfk Method Description GET Fetch resource PUT Update resource DELETE Delete resource Hormis la base 10, deux bases sont utilis\u00e9es en informatique : la base 2 (le syst\u00e8me binaire ) la base 16 (le syst\u00e8me hexad\u00e9cimal ) Dans toute la suite, la base dans laquelle le nombre est \u00e9crit sera pr\u00e9cis\u00e9e en indice. Exemple : \\(13_{10}=1101_2=\\rm{D}_{16}\\)","title":"admonitions"},{"location":"data/example_GL/#i-le-systeme-binaire","text":"En base 2, on ne dispose que des chiffres 0 et 1 . Le syst\u00e8me binaire est un syst\u00e8me de num\u00e9ration de position (comme le syst\u00e8me d\u00e9cimal, hexad\u00e9cimal... mais pas comme le syst\u00e8me romain). \u00c0 chaque rang correspond une puissance de 2.","title":"I. Le syst\u00e8me binaire"}]}